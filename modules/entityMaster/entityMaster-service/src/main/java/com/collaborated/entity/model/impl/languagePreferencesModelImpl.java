/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.languagePreferences;
import com.collaborated.entity.model.languagePreferencesModel;
import com.collaborated.entity.model.languagePreferencesSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the languagePreferences service. Represents a row in the &quot;collaborated_languagePreferences&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link languagePreferencesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link languagePreferencesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see languagePreferencesImpl
 * @see languagePreferences
 * @see languagePreferencesModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class languagePreferencesModelImpl extends BaseModelImpl<languagePreferences>
	implements languagePreferencesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a language preferences model instance should use the {@link languagePreferences} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_languagePreferences";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_languagePreferences", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "languageName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_languagePreferences", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("languageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_languagePreferences (PK_languagePreferences LONG not null primary key,userId LONG,createDate DATE null,modifiedDate DATE null,languageName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_languagePreferences";
	public static final String ORDER_BY_JPQL = " ORDER BY languagePreferences.PK_languagePreferences ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_languagePreferences.PK_languagePreferences ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.languagePreferences"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.languagePreferences"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static languagePreferences toModel(languagePreferencesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		languagePreferences model = new languagePreferencesImpl();

		model.setPK_languagePreferences(soapModel.getPK_languagePreferences());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLanguageName(soapModel.getLanguageName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<languagePreferences> toModels(
		languagePreferencesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<languagePreferences> models = new ArrayList<languagePreferences>(soapModels.length);

		for (languagePreferencesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.languagePreferences"));

	public languagePreferencesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_languagePreferences;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_languagePreferences(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_languagePreferences;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return languagePreferences.class;
	}

	@Override
	public String getModelClassName() {
		return languagePreferences.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_languagePreferences", getPK_languagePreferences());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("languageName", getLanguageName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_languagePreferences = (Long)attributes.get(
				"PK_languagePreferences");

		if (PK_languagePreferences != null) {
			setPK_languagePreferences(PK_languagePreferences);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String languageName = (String)attributes.get("languageName");

		if (languageName != null) {
			setLanguageName(languageName);
		}
	}

	@JSON
	@Override
	public long getPK_languagePreferences() {
		return _PK_languagePreferences;
	}

	@Override
	public void setPK_languagePreferences(long PK_languagePreferences) {
		_PK_languagePreferences = PK_languagePreferences;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLanguageName() {
		if (_languageName == null) {
			return StringPool.BLANK;
		}
		else {
			return _languageName;
		}
	}

	@Override
	public void setLanguageName(String languageName) {
		_languageName = languageName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			languagePreferences.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public languagePreferences toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (languagePreferences)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		languagePreferencesImpl languagePreferencesImpl = new languagePreferencesImpl();

		languagePreferencesImpl.setPK_languagePreferences(getPK_languagePreferences());
		languagePreferencesImpl.setUserId(getUserId());
		languagePreferencesImpl.setCreateDate(getCreateDate());
		languagePreferencesImpl.setModifiedDate(getModifiedDate());
		languagePreferencesImpl.setLanguageName(getLanguageName());

		languagePreferencesImpl.resetOriginalValues();

		return languagePreferencesImpl;
	}

	@Override
	public int compareTo(languagePreferences languagePreferences) {
		long primaryKey = languagePreferences.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof languagePreferences)) {
			return false;
		}

		languagePreferences languagePreferences = (languagePreferences)obj;

		long primaryKey = languagePreferences.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		languagePreferencesModelImpl languagePreferencesModelImpl = this;

		languagePreferencesModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<languagePreferences> toCacheModel() {
		languagePreferencesCacheModel languagePreferencesCacheModel = new languagePreferencesCacheModel();

		languagePreferencesCacheModel.PK_languagePreferences = getPK_languagePreferences();

		languagePreferencesCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			languagePreferencesCacheModel.createDate = createDate.getTime();
		}
		else {
			languagePreferencesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			languagePreferencesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			languagePreferencesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		languagePreferencesCacheModel.languageName = getLanguageName();

		String languageName = languagePreferencesCacheModel.languageName;

		if ((languageName != null) && (languageName.length() == 0)) {
			languagePreferencesCacheModel.languageName = null;
		}

		return languagePreferencesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{PK_languagePreferences=");
		sb.append(getPK_languagePreferences());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", languageName=");
		sb.append(getLanguageName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.languagePreferences");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_languagePreferences</column-name><column-value><![CDATA[");
		sb.append(getPK_languagePreferences());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageName</column-name><column-value><![CDATA[");
		sb.append(getLanguageName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = languagePreferences.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			languagePreferences.class
		};
	private long _PK_languagePreferences;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _languageName;
	private languagePreferences _escapedModel;
}