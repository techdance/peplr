/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.userProfileImage;
import com.collaborated.entity.model.userProfileImageBlobDataBlobModel;
import com.collaborated.entity.model.userProfileImageModel;
import com.collaborated.entity.model.userProfileImageSoap;
import com.collaborated.entity.service.userProfileImageLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the userProfileImage service. Represents a row in the &quot;collaborated_userProfileImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link userProfileImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link userProfileImageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see userProfileImageImpl
 * @see userProfileImage
 * @see userProfileImageModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class userProfileImageModelImpl extends BaseModelImpl<userProfileImage>
	implements userProfileImageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user profile image model instance should use the {@link userProfileImage} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_userProfileImage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_profileImageId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createdOn", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "fileEntryId", Types.VARCHAR },
			{ "fileEntryUrl", Types.VARCHAR },
			{ "blobData", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_profileImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileEntryUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("blobData", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_userProfileImage (PK_profileImageId LONG not null primary key,groupId LONG,createdOn DATE null,userId LONG,fileEntryId VARCHAR(75) null,fileEntryUrl VARCHAR(75) null,blobData BLOB)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_userProfileImage";
	public static final String ORDER_BY_JPQL = " ORDER BY userProfileImage.PK_profileImageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_userProfileImage.PK_profileImageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.userProfileImage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.userProfileImage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static userProfileImage toModel(userProfileImageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		userProfileImage model = new userProfileImageImpl();

		model.setPK_profileImageId(soapModel.getPK_profileImageId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setUserId(soapModel.getUserId());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setFileEntryUrl(soapModel.getFileEntryUrl());
		model.setBlobData(soapModel.getBlobData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<userProfileImage> toModels(
		userProfileImageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<userProfileImage> models = new ArrayList<userProfileImage>(soapModels.length);

		for (userProfileImageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.userProfileImage"));

	public userProfileImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_profileImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_profileImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_profileImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return userProfileImage.class;
	}

	@Override
	public String getModelClassName() {
		return userProfileImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_profileImageId", getPK_profileImageId());
		attributes.put("groupId", getGroupId());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("userId", getUserId());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("fileEntryUrl", getFileEntryUrl());
		attributes.put("blobData", getBlobData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_profileImageId = (Long)attributes.get("PK_profileImageId");

		if (PK_profileImageId != null) {
			setPK_profileImageId(PK_profileImageId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String fileEntryId = (String)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		String fileEntryUrl = (String)attributes.get("fileEntryUrl");

		if (fileEntryUrl != null) {
			setFileEntryUrl(fileEntryUrl);
		}

		Blob blobData = (Blob)attributes.get("blobData");

		if (blobData != null) {
			setBlobData(blobData);
		}
	}

	@JSON
	@Override
	public long getPK_profileImageId() {
		return _PK_profileImageId;
	}

	@Override
	public void setPK_profileImageId(long PK_profileImageId) {
		_PK_profileImageId = PK_profileImageId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getFileEntryId() {
		if (_fileEntryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileEntryId;
		}
	}

	@Override
	public void setFileEntryId(String fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public String getFileEntryUrl() {
		if (_fileEntryUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileEntryUrl;
		}
	}

	@Override
	public void setFileEntryUrl(String fileEntryUrl) {
		_fileEntryUrl = fileEntryUrl;
	}

	@JSON
	@Override
	public Blob getBlobData() {
		if (_blobDataBlobModel == null) {
			try {
				_blobDataBlobModel = userProfileImageLocalServiceUtil.getBlobDataBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_blobDataBlobModel != null) {
			blob = _blobDataBlobModel.getBlobDataBlob();
		}

		return blob;
	}

	@Override
	public void setBlobData(Blob blobData) {
		if (_blobDataBlobModel == null) {
			_blobDataBlobModel = new userProfileImageBlobDataBlobModel(getPrimaryKey(),
					blobData);
		}
		else {
			_blobDataBlobModel.setBlobDataBlob(blobData);
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			userProfileImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public userProfileImage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (userProfileImage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		userProfileImageImpl userProfileImageImpl = new userProfileImageImpl();

		userProfileImageImpl.setPK_profileImageId(getPK_profileImageId());
		userProfileImageImpl.setGroupId(getGroupId());
		userProfileImageImpl.setCreatedOn(getCreatedOn());
		userProfileImageImpl.setUserId(getUserId());
		userProfileImageImpl.setFileEntryId(getFileEntryId());
		userProfileImageImpl.setFileEntryUrl(getFileEntryUrl());

		userProfileImageImpl.resetOriginalValues();

		return userProfileImageImpl;
	}

	@Override
	public int compareTo(userProfileImage userProfileImage) {
		long primaryKey = userProfileImage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof userProfileImage)) {
			return false;
		}

		userProfileImage userProfileImage = (userProfileImage)obj;

		long primaryKey = userProfileImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		userProfileImageModelImpl userProfileImageModelImpl = this;

		userProfileImageModelImpl._blobDataBlobModel = null;
	}

	@Override
	public CacheModel<userProfileImage> toCacheModel() {
		userProfileImageCacheModel userProfileImageCacheModel = new userProfileImageCacheModel();

		userProfileImageCacheModel.PK_profileImageId = getPK_profileImageId();

		userProfileImageCacheModel.groupId = getGroupId();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			userProfileImageCacheModel.createdOn = createdOn.getTime();
		}
		else {
			userProfileImageCacheModel.createdOn = Long.MIN_VALUE;
		}

		userProfileImageCacheModel.userId = getUserId();

		userProfileImageCacheModel.fileEntryId = getFileEntryId();

		String fileEntryId = userProfileImageCacheModel.fileEntryId;

		if ((fileEntryId != null) && (fileEntryId.length() == 0)) {
			userProfileImageCacheModel.fileEntryId = null;
		}

		userProfileImageCacheModel.fileEntryUrl = getFileEntryUrl();

		String fileEntryUrl = userProfileImageCacheModel.fileEntryUrl;

		if ((fileEntryUrl != null) && (fileEntryUrl.length() == 0)) {
			userProfileImageCacheModel.fileEntryUrl = null;
		}

		return userProfileImageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{PK_profileImageId=");
		sb.append(getPK_profileImageId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", fileEntryUrl=");
		sb.append(getFileEntryUrl());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.userProfileImage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_profileImageId</column-name><column-value><![CDATA[");
		sb.append(getPK_profileImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryUrl</column-name><column-value><![CDATA[");
		sb.append(getFileEntryUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = userProfileImage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			userProfileImage.class
		};
	private long _PK_profileImageId;
	private long _groupId;
	private Date _createdOn;
	private long _userId;
	private String _fileEntryId;
	private String _fileEntryUrl;
	private userProfileImageBlobDataBlobModel _blobDataBlobModel;
	private userProfileImage _escapedModel;
}