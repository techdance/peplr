/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.Custom_Calendar;
import com.collaborated.entity.model.Custom_CalendarModel;
import com.collaborated.entity.model.Custom_CalendarSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Custom_Calendar service. Represents a row in the &quot;collaborated_Custom_Calendar&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Custom_CalendarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Custom_CalendarImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Custom_CalendarImpl
 * @see Custom_Calendar
 * @see Custom_CalendarModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class Custom_CalendarModelImpl extends BaseModelImpl<Custom_Calendar>
	implements Custom_CalendarModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom_ calendar model instance should use the {@link Custom_Calendar} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_Custom_Calendar";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_calendarEventId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "calendarResourceId", Types.BIGINT },
			{ "timeZoneId", Types.VARCHAR },
			{ "startDate", Types.VARCHAR },
			{ "endDate", Types.VARCHAR },
			{ "startTime", Types.VARCHAR },
			{ "endTime", Types.VARCHAR },
			{ "eventTitle", Types.VARCHAR },
			{ "eventLocation", Types.VARCHAR },
			{ "allDay", Types.INTEGER },
			{ "repeat_", Types.VARCHAR },
			{ "endRepeat", Types.VARCHAR },
			{ "endRepeatDate", Types.VARCHAR },
			{ "alert", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "notes", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_calendarEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("calendarResourceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("timeZoneId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allDay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("repeat_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endRepeat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endRepeatDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alert", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notes", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_Custom_Calendar (PK_calendarEventId LONG not null primary key,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,calendarResourceId LONG,timeZoneId VARCHAR(75) null,startDate VARCHAR(75) null,endDate VARCHAR(75) null,startTime VARCHAR(75) null,endTime VARCHAR(75) null,eventTitle VARCHAR(75) null,eventLocation VARCHAR(75) null,allDay INTEGER,repeat_ VARCHAR(75) null,endRepeat VARCHAR(75) null,endRepeatDate VARCHAR(75) null,alert VARCHAR(75) null,url VARCHAR(75) null,notes VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_Custom_Calendar";
	public static final String ORDER_BY_JPQL = " ORDER BY custom_Calendar.PK_calendarEventId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_Custom_Calendar.PK_calendarEventId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.Custom_Calendar"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.Custom_Calendar"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Custom_Calendar toModel(Custom_CalendarSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Custom_Calendar model = new Custom_CalendarImpl();

		model.setPK_calendarEventId(soapModel.getPK_calendarEventId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCalendarResourceId(soapModel.getCalendarResourceId());
		model.setTimeZoneId(soapModel.getTimeZoneId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());
		model.setEventTitle(soapModel.getEventTitle());
		model.setEventLocation(soapModel.getEventLocation());
		model.setAllDay(soapModel.getAllDay());
		model.setRepeat(soapModel.getRepeat());
		model.setEndRepeat(soapModel.getEndRepeat());
		model.setEndRepeatDate(soapModel.getEndRepeatDate());
		model.setAlert(soapModel.getAlert());
		model.setUrl(soapModel.getUrl());
		model.setNotes(soapModel.getNotes());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Custom_Calendar> toModels(
		Custom_CalendarSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Custom_Calendar> models = new ArrayList<Custom_Calendar>(soapModels.length);

		for (Custom_CalendarSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.Custom_Calendar"));

	public Custom_CalendarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_calendarEventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_calendarEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_calendarEventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Custom_Calendar.class;
	}

	@Override
	public String getModelClassName() {
		return Custom_Calendar.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_calendarEventId", getPK_calendarEventId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("calendarResourceId", getCalendarResourceId());
		attributes.put("timeZoneId", getTimeZoneId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());
		attributes.put("eventTitle", getEventTitle());
		attributes.put("eventLocation", getEventLocation());
		attributes.put("allDay", getAllDay());
		attributes.put("repeat", getRepeat());
		attributes.put("endRepeat", getEndRepeat());
		attributes.put("endRepeatDate", getEndRepeatDate());
		attributes.put("alert", getAlert());
		attributes.put("url", getUrl());
		attributes.put("notes", getNotes());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_calendarEventId = (Long)attributes.get("PK_calendarEventId");

		if (PK_calendarEventId != null) {
			setPK_calendarEventId(PK_calendarEventId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long calendarResourceId = (Long)attributes.get("calendarResourceId");

		if (calendarResourceId != null) {
			setCalendarResourceId(calendarResourceId);
		}

		String timeZoneId = (String)attributes.get("timeZoneId");

		if (timeZoneId != null) {
			setTimeZoneId(timeZoneId);
		}

		String startDate = (String)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		String endDate = (String)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String startTime = (String)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		String endTime = (String)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}

		String eventTitle = (String)attributes.get("eventTitle");

		if (eventTitle != null) {
			setEventTitle(eventTitle);
		}

		String eventLocation = (String)attributes.get("eventLocation");

		if (eventLocation != null) {
			setEventLocation(eventLocation);
		}

		Integer allDay = (Integer)attributes.get("allDay");

		if (allDay != null) {
			setAllDay(allDay);
		}

		String repeat = (String)attributes.get("repeat");

		if (repeat != null) {
			setRepeat(repeat);
		}

		String endRepeat = (String)attributes.get("endRepeat");

		if (endRepeat != null) {
			setEndRepeat(endRepeat);
		}

		String endRepeatDate = (String)attributes.get("endRepeatDate");

		if (endRepeatDate != null) {
			setEndRepeatDate(endRepeatDate);
		}

		String alert = (String)attributes.get("alert");

		if (alert != null) {
			setAlert(alert);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}
	}

	@JSON
	@Override
	public long getPK_calendarEventId() {
		return _PK_calendarEventId;
	}

	@Override
	public void setPK_calendarEventId(long PK_calendarEventId) {
		_PK_calendarEventId = PK_calendarEventId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCalendarResourceId() {
		return _calendarResourceId;
	}

	@Override
	public void setCalendarResourceId(long calendarResourceId) {
		_calendarResourceId = calendarResourceId;
	}

	@JSON
	@Override
	public String getTimeZoneId() {
		if (_timeZoneId == null) {
			return StringPool.BLANK;
		}
		else {
			return _timeZoneId;
		}
	}

	@Override
	public void setTimeZoneId(String timeZoneId) {
		_timeZoneId = timeZoneId;
	}

	@JSON
	@Override
	public String getStartDate() {
		if (_startDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _startDate;
		}
	}

	@Override
	public void setStartDate(String startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public String getEndDate() {
		if (_endDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _endDate;
		}
	}

	@Override
	public void setEndDate(String endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getStartTime() {
		if (_startTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _startTime;
		}
	}

	@Override
	public void setStartTime(String startTime) {
		_startTime = startTime;
	}

	@JSON
	@Override
	public String getEndTime() {
		if (_endTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _endTime;
		}
	}

	@Override
	public void setEndTime(String endTime) {
		_endTime = endTime;
	}

	@JSON
	@Override
	public String getEventTitle() {
		if (_eventTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventTitle;
		}
	}

	@Override
	public void setEventTitle(String eventTitle) {
		_eventTitle = eventTitle;
	}

	@JSON
	@Override
	public String getEventLocation() {
		if (_eventLocation == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventLocation;
		}
	}

	@Override
	public void setEventLocation(String eventLocation) {
		_eventLocation = eventLocation;
	}

	@JSON
	@Override
	public int getAllDay() {
		return _allDay;
	}

	@Override
	public void setAllDay(int allDay) {
		_allDay = allDay;
	}

	@JSON
	@Override
	public String getRepeat() {
		if (_repeat == null) {
			return StringPool.BLANK;
		}
		else {
			return _repeat;
		}
	}

	@Override
	public void setRepeat(String repeat) {
		_repeat = repeat;
	}

	@JSON
	@Override
	public String getEndRepeat() {
		if (_endRepeat == null) {
			return StringPool.BLANK;
		}
		else {
			return _endRepeat;
		}
	}

	@Override
	public void setEndRepeat(String endRepeat) {
		_endRepeat = endRepeat;
	}

	@JSON
	@Override
	public String getEndRepeatDate() {
		if (_endRepeatDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _endRepeatDate;
		}
	}

	@Override
	public void setEndRepeatDate(String endRepeatDate) {
		_endRepeatDate = endRepeatDate;
	}

	@JSON
	@Override
	public String getAlert() {
		if (_alert == null) {
			return StringPool.BLANK;
		}
		else {
			return _alert;
		}
	}

	@Override
	public void setAlert(String alert) {
		_alert = alert;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Custom_Calendar.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Custom_Calendar toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Custom_Calendar)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Custom_CalendarImpl custom_CalendarImpl = new Custom_CalendarImpl();

		custom_CalendarImpl.setPK_calendarEventId(getPK_calendarEventId());
		custom_CalendarImpl.setGroupId(getGroupId());
		custom_CalendarImpl.setUserId(getUserId());
		custom_CalendarImpl.setCreateDate(getCreateDate());
		custom_CalendarImpl.setModifiedDate(getModifiedDate());
		custom_CalendarImpl.setCalendarResourceId(getCalendarResourceId());
		custom_CalendarImpl.setTimeZoneId(getTimeZoneId());
		custom_CalendarImpl.setStartDate(getStartDate());
		custom_CalendarImpl.setEndDate(getEndDate());
		custom_CalendarImpl.setStartTime(getStartTime());
		custom_CalendarImpl.setEndTime(getEndTime());
		custom_CalendarImpl.setEventTitle(getEventTitle());
		custom_CalendarImpl.setEventLocation(getEventLocation());
		custom_CalendarImpl.setAllDay(getAllDay());
		custom_CalendarImpl.setRepeat(getRepeat());
		custom_CalendarImpl.setEndRepeat(getEndRepeat());
		custom_CalendarImpl.setEndRepeatDate(getEndRepeatDate());
		custom_CalendarImpl.setAlert(getAlert());
		custom_CalendarImpl.setUrl(getUrl());
		custom_CalendarImpl.setNotes(getNotes());

		custom_CalendarImpl.resetOriginalValues();

		return custom_CalendarImpl;
	}

	@Override
	public int compareTo(Custom_Calendar custom_Calendar) {
		long primaryKey = custom_Calendar.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Custom_Calendar)) {
			return false;
		}

		Custom_Calendar custom_Calendar = (Custom_Calendar)obj;

		long primaryKey = custom_Calendar.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Custom_CalendarModelImpl custom_CalendarModelImpl = this;

		custom_CalendarModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<Custom_Calendar> toCacheModel() {
		Custom_CalendarCacheModel custom_CalendarCacheModel = new Custom_CalendarCacheModel();

		custom_CalendarCacheModel.PK_calendarEventId = getPK_calendarEventId();

		custom_CalendarCacheModel.groupId = getGroupId();

		custom_CalendarCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			custom_CalendarCacheModel.createDate = createDate.getTime();
		}
		else {
			custom_CalendarCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			custom_CalendarCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			custom_CalendarCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		custom_CalendarCacheModel.calendarResourceId = getCalendarResourceId();

		custom_CalendarCacheModel.timeZoneId = getTimeZoneId();

		String timeZoneId = custom_CalendarCacheModel.timeZoneId;

		if ((timeZoneId != null) && (timeZoneId.length() == 0)) {
			custom_CalendarCacheModel.timeZoneId = null;
		}

		custom_CalendarCacheModel.startDate = getStartDate();

		String startDate = custom_CalendarCacheModel.startDate;

		if ((startDate != null) && (startDate.length() == 0)) {
			custom_CalendarCacheModel.startDate = null;
		}

		custom_CalendarCacheModel.endDate = getEndDate();

		String endDate = custom_CalendarCacheModel.endDate;

		if ((endDate != null) && (endDate.length() == 0)) {
			custom_CalendarCacheModel.endDate = null;
		}

		custom_CalendarCacheModel.startTime = getStartTime();

		String startTime = custom_CalendarCacheModel.startTime;

		if ((startTime != null) && (startTime.length() == 0)) {
			custom_CalendarCacheModel.startTime = null;
		}

		custom_CalendarCacheModel.endTime = getEndTime();

		String endTime = custom_CalendarCacheModel.endTime;

		if ((endTime != null) && (endTime.length() == 0)) {
			custom_CalendarCacheModel.endTime = null;
		}

		custom_CalendarCacheModel.eventTitle = getEventTitle();

		String eventTitle = custom_CalendarCacheModel.eventTitle;

		if ((eventTitle != null) && (eventTitle.length() == 0)) {
			custom_CalendarCacheModel.eventTitle = null;
		}

		custom_CalendarCacheModel.eventLocation = getEventLocation();

		String eventLocation = custom_CalendarCacheModel.eventLocation;

		if ((eventLocation != null) && (eventLocation.length() == 0)) {
			custom_CalendarCacheModel.eventLocation = null;
		}

		custom_CalendarCacheModel.allDay = getAllDay();

		custom_CalendarCacheModel.repeat = getRepeat();

		String repeat = custom_CalendarCacheModel.repeat;

		if ((repeat != null) && (repeat.length() == 0)) {
			custom_CalendarCacheModel.repeat = null;
		}

		custom_CalendarCacheModel.endRepeat = getEndRepeat();

		String endRepeat = custom_CalendarCacheModel.endRepeat;

		if ((endRepeat != null) && (endRepeat.length() == 0)) {
			custom_CalendarCacheModel.endRepeat = null;
		}

		custom_CalendarCacheModel.endRepeatDate = getEndRepeatDate();

		String endRepeatDate = custom_CalendarCacheModel.endRepeatDate;

		if ((endRepeatDate != null) && (endRepeatDate.length() == 0)) {
			custom_CalendarCacheModel.endRepeatDate = null;
		}

		custom_CalendarCacheModel.alert = getAlert();

		String alert = custom_CalendarCacheModel.alert;

		if ((alert != null) && (alert.length() == 0)) {
			custom_CalendarCacheModel.alert = null;
		}

		custom_CalendarCacheModel.url = getUrl();

		String url = custom_CalendarCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			custom_CalendarCacheModel.url = null;
		}

		custom_CalendarCacheModel.notes = getNotes();

		String notes = custom_CalendarCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			custom_CalendarCacheModel.notes = null;
		}

		return custom_CalendarCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{PK_calendarEventId=");
		sb.append(getPK_calendarEventId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", calendarResourceId=");
		sb.append(getCalendarResourceId());
		sb.append(", timeZoneId=");
		sb.append(getTimeZoneId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", eventTitle=");
		sb.append(getEventTitle());
		sb.append(", eventLocation=");
		sb.append(getEventLocation());
		sb.append(", allDay=");
		sb.append(getAllDay());
		sb.append(", repeat=");
		sb.append(getRepeat());
		sb.append(", endRepeat=");
		sb.append(getEndRepeat());
		sb.append(", endRepeatDate=");
		sb.append(getEndRepeatDate());
		sb.append(", alert=");
		sb.append(getAlert());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.Custom_Calendar");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_calendarEventId</column-name><column-value><![CDATA[");
		sb.append(getPK_calendarEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarResourceId</column-name><column-value><![CDATA[");
		sb.append(getCalendarResourceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeZoneId</column-name><column-value><![CDATA[");
		sb.append(getTimeZoneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventTitle</column-name><column-value><![CDATA[");
		sb.append(getEventTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventLocation</column-name><column-value><![CDATA[");
		sb.append(getEventLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allDay</column-name><column-value><![CDATA[");
		sb.append(getAllDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repeat</column-name><column-value><![CDATA[");
		sb.append(getRepeat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endRepeat</column-name><column-value><![CDATA[");
		sb.append(getEndRepeat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endRepeatDate</column-name><column-value><![CDATA[");
		sb.append(getEndRepeatDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alert</column-name><column-value><![CDATA[");
		sb.append(getAlert());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Custom_Calendar.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Custom_Calendar.class
		};
	private long _PK_calendarEventId;
	private long _groupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _calendarResourceId;
	private String _timeZoneId;
	private String _startDate;
	private String _endDate;
	private String _startTime;
	private String _endTime;
	private String _eventTitle;
	private String _eventLocation;
	private int _allDay;
	private String _repeat;
	private String _endRepeat;
	private String _endRepeatDate;
	private String _alert;
	private String _url;
	private String _notes;
	private Custom_Calendar _escapedModel;
}