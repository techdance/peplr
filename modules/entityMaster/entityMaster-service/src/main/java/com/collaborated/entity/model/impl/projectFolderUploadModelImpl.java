/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.projectFolderUpload;
import com.collaborated.entity.model.projectFolderUploadModel;
import com.collaborated.entity.model.projectFolderUploadSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the projectFolderUpload service. Represents a row in the &quot;collaborated_projectFolderUpload&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link projectFolderUploadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link projectFolderUploadImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see projectFolderUploadImpl
 * @see projectFolderUpload
 * @see projectFolderUploadModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class projectFolderUploadModelImpl extends BaseModelImpl<projectFolderUpload>
	implements projectFolderUploadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project folder upload model instance should use the {@link projectFolderUpload} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_projectFolderUpload";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_projectFolderId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createdOn", Types.TIMESTAMP },
			{ "deletedOn", Types.TIMESTAMP },
			{ "interestId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "deletedBy", Types.BIGINT },
			{ "parentFolderId", Types.BIGINT },
			{ "folderId", Types.BIGINT },
			{ "folderName", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_projectFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("deletedOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("interestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deletedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_projectFolderUpload (PK_projectFolderId LONG not null primary key,groupId LONG,createdOn DATE null,deletedOn DATE null,interestId LONG,projectId LONG,userId LONG,deletedBy LONG,parentFolderId LONG,folderId LONG,folderName VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_projectFolderUpload";
	public static final String ORDER_BY_JPQL = " ORDER BY projectFolderUpload.PK_projectFolderId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_projectFolderUpload.PK_projectFolderId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.projectFolderUpload"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.projectFolderUpload"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static projectFolderUpload toModel(projectFolderUploadSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		projectFolderUpload model = new projectFolderUploadImpl();

		model.setPK_projectFolderId(soapModel.getPK_projectFolderId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setDeletedOn(soapModel.getDeletedOn());
		model.setInterestId(soapModel.getInterestId());
		model.setProjectId(soapModel.getProjectId());
		model.setUserId(soapModel.getUserId());
		model.setDeletedBy(soapModel.getDeletedBy());
		model.setParentFolderId(soapModel.getParentFolderId());
		model.setFolderId(soapModel.getFolderId());
		model.setFolderName(soapModel.getFolderName());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<projectFolderUpload> toModels(
		projectFolderUploadSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<projectFolderUpload> models = new ArrayList<projectFolderUpload>(soapModels.length);

		for (projectFolderUploadSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.projectFolderUpload"));

	public projectFolderUploadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_projectFolderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_projectFolderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_projectFolderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return projectFolderUpload.class;
	}

	@Override
	public String getModelClassName() {
		return projectFolderUpload.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_projectFolderId", getPK_projectFolderId());
		attributes.put("groupId", getGroupId());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("deletedOn", getDeletedOn());
		attributes.put("interestId", getInterestId());
		attributes.put("projectId", getProjectId());
		attributes.put("userId", getUserId());
		attributes.put("deletedBy", getDeletedBy());
		attributes.put("parentFolderId", getParentFolderId());
		attributes.put("folderId", getFolderId());
		attributes.put("folderName", getFolderName());
		attributes.put("description", getDescription());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_projectFolderId = (Long)attributes.get("PK_projectFolderId");

		if (PK_projectFolderId != null) {
			setPK_projectFolderId(PK_projectFolderId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		Date deletedOn = (Date)attributes.get("deletedOn");

		if (deletedOn != null) {
			setDeletedOn(deletedOn);
		}

		Long interestId = (Long)attributes.get("interestId");

		if (interestId != null) {
			setInterestId(interestId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long deletedBy = (Long)attributes.get("deletedBy");

		if (deletedBy != null) {
			setDeletedBy(deletedBy);
		}

		Long parentFolderId = (Long)attributes.get("parentFolderId");

		if (parentFolderId != null) {
			setParentFolderId(parentFolderId);
		}

		Long folderId = (Long)attributes.get("folderId");

		if (folderId != null) {
			setFolderId(folderId);
		}

		String folderName = (String)attributes.get("folderName");

		if (folderName != null) {
			setFolderName(folderName);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getPK_projectFolderId() {
		return _PK_projectFolderId;
	}

	@Override
	public void setPK_projectFolderId(long PK_projectFolderId) {
		_PK_projectFolderId = PK_projectFolderId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	@Override
	public Date getDeletedOn() {
		return _deletedOn;
	}

	@Override
	public void setDeletedOn(Date deletedOn) {
		_deletedOn = deletedOn;
	}

	@JSON
	@Override
	public long getInterestId() {
		return _interestId;
	}

	@Override
	public void setInterestId(long interestId) {
		_interestId = interestId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getDeletedBy() {
		return _deletedBy;
	}

	@Override
	public void setDeletedBy(long deletedBy) {
		_deletedBy = deletedBy;
	}

	@JSON
	@Override
	public long getParentFolderId() {
		return _parentFolderId;
	}

	@Override
	public void setParentFolderId(long parentFolderId) {
		_parentFolderId = parentFolderId;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@JSON
	@Override
	public String getFolderName() {
		if (_folderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _folderName;
		}
	}

	@Override
	public void setFolderName(String folderName) {
		_folderName = folderName;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			projectFolderUpload.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public projectFolderUpload toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (projectFolderUpload)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		projectFolderUploadImpl projectFolderUploadImpl = new projectFolderUploadImpl();

		projectFolderUploadImpl.setPK_projectFolderId(getPK_projectFolderId());
		projectFolderUploadImpl.setGroupId(getGroupId());
		projectFolderUploadImpl.setCreatedOn(getCreatedOn());
		projectFolderUploadImpl.setDeletedOn(getDeletedOn());
		projectFolderUploadImpl.setInterestId(getInterestId());
		projectFolderUploadImpl.setProjectId(getProjectId());
		projectFolderUploadImpl.setUserId(getUserId());
		projectFolderUploadImpl.setDeletedBy(getDeletedBy());
		projectFolderUploadImpl.setParentFolderId(getParentFolderId());
		projectFolderUploadImpl.setFolderId(getFolderId());
		projectFolderUploadImpl.setFolderName(getFolderName());
		projectFolderUploadImpl.setDescription(getDescription());

		projectFolderUploadImpl.resetOriginalValues();

		return projectFolderUploadImpl;
	}

	@Override
	public int compareTo(projectFolderUpload projectFolderUpload) {
		long primaryKey = projectFolderUpload.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof projectFolderUpload)) {
			return false;
		}

		projectFolderUpload projectFolderUpload = (projectFolderUpload)obj;

		long primaryKey = projectFolderUpload.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<projectFolderUpload> toCacheModel() {
		projectFolderUploadCacheModel projectFolderUploadCacheModel = new projectFolderUploadCacheModel();

		projectFolderUploadCacheModel.PK_projectFolderId = getPK_projectFolderId();

		projectFolderUploadCacheModel.groupId = getGroupId();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			projectFolderUploadCacheModel.createdOn = createdOn.getTime();
		}
		else {
			projectFolderUploadCacheModel.createdOn = Long.MIN_VALUE;
		}

		Date deletedOn = getDeletedOn();

		if (deletedOn != null) {
			projectFolderUploadCacheModel.deletedOn = deletedOn.getTime();
		}
		else {
			projectFolderUploadCacheModel.deletedOn = Long.MIN_VALUE;
		}

		projectFolderUploadCacheModel.interestId = getInterestId();

		projectFolderUploadCacheModel.projectId = getProjectId();

		projectFolderUploadCacheModel.userId = getUserId();

		projectFolderUploadCacheModel.deletedBy = getDeletedBy();

		projectFolderUploadCacheModel.parentFolderId = getParentFolderId();

		projectFolderUploadCacheModel.folderId = getFolderId();

		projectFolderUploadCacheModel.folderName = getFolderName();

		String folderName = projectFolderUploadCacheModel.folderName;

		if ((folderName != null) && (folderName.length() == 0)) {
			projectFolderUploadCacheModel.folderName = null;
		}

		projectFolderUploadCacheModel.description = getDescription();

		String description = projectFolderUploadCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			projectFolderUploadCacheModel.description = null;
		}

		return projectFolderUploadCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{PK_projectFolderId=");
		sb.append(getPK_projectFolderId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", deletedOn=");
		sb.append(getDeletedOn());
		sb.append(", interestId=");
		sb.append(getInterestId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", deletedBy=");
		sb.append(getDeletedBy());
		sb.append(", parentFolderId=");
		sb.append(getParentFolderId());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append(", folderName=");
		sb.append(getFolderName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.projectFolderUpload");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_projectFolderId</column-name><column-value><![CDATA[");
		sb.append(getPK_projectFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deletedOn</column-name><column-value><![CDATA[");
		sb.append(getDeletedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interestId</column-name><column-value><![CDATA[");
		sb.append(getInterestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deletedBy</column-name><column-value><![CDATA[");
		sb.append(getDeletedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentFolderId</column-name><column-value><![CDATA[");
		sb.append(getParentFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderName</column-name><column-value><![CDATA[");
		sb.append(getFolderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = projectFolderUpload.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			projectFolderUpload.class
		};
	private long _PK_projectFolderId;
	private long _groupId;
	private Date _createdOn;
	private Date _deletedOn;
	private long _interestId;
	private long _projectId;
	private long _userId;
	private long _deletedBy;
	private long _parentFolderId;
	private long _folderId;
	private String _folderName;
	private String _description;
	private projectFolderUpload _escapedModel;
}