/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.Custom_Workflow;
import com.collaborated.entity.model.Custom_WorkflowModel;
import com.collaborated.entity.model.Custom_WorkflowSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Custom_Workflow service. Represents a row in the &quot;collaborated_Custom_Workflow&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Custom_WorkflowModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Custom_WorkflowImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Custom_WorkflowImpl
 * @see Custom_Workflow
 * @see Custom_WorkflowModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class Custom_WorkflowModelImpl extends BaseModelImpl<Custom_Workflow>
	implements Custom_WorkflowModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom_ workflow model instance should use the {@link Custom_Workflow} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_Custom_Workflow";
	public static final Object[][] TABLE_COLUMNS = {
			{ "workFlowId", Types.BIGINT },
			{ "workFlowName", Types.VARCHAR },
			{ "startWorkflowTaskId", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "isActive", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("workFlowId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workFlowName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startWorkflowTaskId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isActive", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_Custom_Workflow (workFlowId LONG not null primary key,workFlowName VARCHAR(75) null,startWorkflowTaskId VARCHAR(75) null,comments VARCHAR(75) null,isActive LONG,createdDate DATE null,createdBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_Custom_Workflow";
	public static final String ORDER_BY_JPQL = " ORDER BY custom_Workflow.workFlowId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_Custom_Workflow.workFlowId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.Custom_Workflow"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.Custom_Workflow"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Custom_Workflow toModel(Custom_WorkflowSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Custom_Workflow model = new Custom_WorkflowImpl();

		model.setWorkFlowId(soapModel.getWorkFlowId());
		model.setWorkFlowName(soapModel.getWorkFlowName());
		model.setStartWorkflowTaskId(soapModel.getStartWorkflowTaskId());
		model.setComments(soapModel.getComments());
		model.setIsActive(soapModel.getIsActive());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedBy(soapModel.getCreatedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Custom_Workflow> toModels(
		Custom_WorkflowSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Custom_Workflow> models = new ArrayList<Custom_Workflow>(soapModels.length);

		for (Custom_WorkflowSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.Custom_Workflow"));

	public Custom_WorkflowModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _workFlowId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWorkFlowId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _workFlowId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Custom_Workflow.class;
	}

	@Override
	public String getModelClassName() {
		return Custom_Workflow.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("workFlowId", getWorkFlowId());
		attributes.put("workFlowName", getWorkFlowName());
		attributes.put("startWorkflowTaskId", getStartWorkflowTaskId());
		attributes.put("comments", getComments());
		attributes.put("isActive", getIsActive());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long workFlowId = (Long)attributes.get("workFlowId");

		if (workFlowId != null) {
			setWorkFlowId(workFlowId);
		}

		String workFlowName = (String)attributes.get("workFlowName");

		if (workFlowName != null) {
			setWorkFlowName(workFlowName);
		}

		String startWorkflowTaskId = (String)attributes.get(
				"startWorkflowTaskId");

		if (startWorkflowTaskId != null) {
			setStartWorkflowTaskId(startWorkflowTaskId);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Long isActive = (Long)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}
	}

	@JSON
	@Override
	public long getWorkFlowId() {
		return _workFlowId;
	}

	@Override
	public void setWorkFlowId(long workFlowId) {
		_workFlowId = workFlowId;
	}

	@JSON
	@Override
	public String getWorkFlowName() {
		if (_workFlowName == null) {
			return StringPool.BLANK;
		}
		else {
			return _workFlowName;
		}
	}

	@Override
	public void setWorkFlowName(String workFlowName) {
		_workFlowName = workFlowName;
	}

	@JSON
	@Override
	public String getStartWorkflowTaskId() {
		if (_startWorkflowTaskId == null) {
			return StringPool.BLANK;
		}
		else {
			return _startWorkflowTaskId;
		}
	}

	@Override
	public void setStartWorkflowTaskId(String startWorkflowTaskId) {
		_startWorkflowTaskId = startWorkflowTaskId;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public long getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(long isActive) {
		_isActive = isActive;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Custom_Workflow.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Custom_Workflow toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Custom_Workflow)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Custom_WorkflowImpl custom_WorkflowImpl = new Custom_WorkflowImpl();

		custom_WorkflowImpl.setWorkFlowId(getWorkFlowId());
		custom_WorkflowImpl.setWorkFlowName(getWorkFlowName());
		custom_WorkflowImpl.setStartWorkflowTaskId(getStartWorkflowTaskId());
		custom_WorkflowImpl.setComments(getComments());
		custom_WorkflowImpl.setIsActive(getIsActive());
		custom_WorkflowImpl.setCreatedDate(getCreatedDate());
		custom_WorkflowImpl.setCreatedBy(getCreatedBy());

		custom_WorkflowImpl.resetOriginalValues();

		return custom_WorkflowImpl;
	}

	@Override
	public int compareTo(Custom_Workflow custom_Workflow) {
		long primaryKey = custom_Workflow.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Custom_Workflow)) {
			return false;
		}

		Custom_Workflow custom_Workflow = (Custom_Workflow)obj;

		long primaryKey = custom_Workflow.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Custom_Workflow> toCacheModel() {
		Custom_WorkflowCacheModel custom_WorkflowCacheModel = new Custom_WorkflowCacheModel();

		custom_WorkflowCacheModel.workFlowId = getWorkFlowId();

		custom_WorkflowCacheModel.workFlowName = getWorkFlowName();

		String workFlowName = custom_WorkflowCacheModel.workFlowName;

		if ((workFlowName != null) && (workFlowName.length() == 0)) {
			custom_WorkflowCacheModel.workFlowName = null;
		}

		custom_WorkflowCacheModel.startWorkflowTaskId = getStartWorkflowTaskId();

		String startWorkflowTaskId = custom_WorkflowCacheModel.startWorkflowTaskId;

		if ((startWorkflowTaskId != null) &&
				(startWorkflowTaskId.length() == 0)) {
			custom_WorkflowCacheModel.startWorkflowTaskId = null;
		}

		custom_WorkflowCacheModel.comments = getComments();

		String comments = custom_WorkflowCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			custom_WorkflowCacheModel.comments = null;
		}

		custom_WorkflowCacheModel.isActive = getIsActive();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			custom_WorkflowCacheModel.createdDate = createdDate.getTime();
		}
		else {
			custom_WorkflowCacheModel.createdDate = Long.MIN_VALUE;
		}

		custom_WorkflowCacheModel.createdBy = getCreatedBy();

		return custom_WorkflowCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{workFlowId=");
		sb.append(getWorkFlowId());
		sb.append(", workFlowName=");
		sb.append(getWorkFlowName());
		sb.append(", startWorkflowTaskId=");
		sb.append(getStartWorkflowTaskId());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.Custom_Workflow");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>workFlowId</column-name><column-value><![CDATA[");
		sb.append(getWorkFlowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workFlowName</column-name><column-value><![CDATA[");
		sb.append(getWorkFlowName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startWorkflowTaskId</column-name><column-value><![CDATA[");
		sb.append(getStartWorkflowTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Custom_Workflow.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Custom_Workflow.class
		};
	private long _workFlowId;
	private String _workFlowName;
	private String _startWorkflowTaskId;
	private String _comments;
	private long _isActive;
	private Date _createdDate;
	private long _createdBy;
	private Custom_Workflow _escapedModel;
}