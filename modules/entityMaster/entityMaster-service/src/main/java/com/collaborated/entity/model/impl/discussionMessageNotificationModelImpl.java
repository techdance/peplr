/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.discussionMessageNotification;
import com.collaborated.entity.model.discussionMessageNotificationModel;
import com.collaborated.entity.model.discussionMessageNotificationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the discussionMessageNotification service. Represents a row in the &quot;collaborated_discussionMessageNotification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link discussionMessageNotificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link discussionMessageNotificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see discussionMessageNotificationImpl
 * @see discussionMessageNotification
 * @see discussionMessageNotificationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class discussionMessageNotificationModelImpl extends BaseModelImpl<discussionMessageNotification>
	implements discussionMessageNotificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a discussion message notification model instance should use the {@link discussionMessageNotification} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_discussionMessageNotification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_discussionNotificationId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "PK_projectDiscussionId", Types.BIGINT },
			{ "messageFrom", Types.BIGINT },
			{ "messageTo", Types.BIGINT },
			{ "isRead", Types.BIGINT },
			{ "isRemoved", Types.BIGINT },
			{ "messageTitle", Types.VARCHAR },
			{ "messageContent", Types.VARCHAR },
			{ "emailContent", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_discussionNotificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PK_projectDiscussionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("messageFrom", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("messageTo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isRead", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isRemoved", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("messageTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("messageContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailContent", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_discussionMessageNotification (PK_discussionNotificationId LONG not null primary key,groupId LONG,createDate DATE null,modifiedDate DATE null,PK_projectDiscussionId LONG,messageFrom LONG,messageTo LONG,isRead LONG,isRemoved LONG,messageTitle VARCHAR(75) null,messageContent VARCHAR(75) null,emailContent VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_discussionMessageNotification";
	public static final String ORDER_BY_JPQL = " ORDER BY discussionMessageNotification.PK_discussionNotificationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_discussionMessageNotification.PK_discussionNotificationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.discussionMessageNotification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.discussionMessageNotification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static discussionMessageNotification toModel(
		discussionMessageNotificationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		discussionMessageNotification model = new discussionMessageNotificationImpl();

		model.setPK_discussionNotificationId(soapModel.getPK_discussionNotificationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPK_projectDiscussionId(soapModel.getPK_projectDiscussionId());
		model.setMessageFrom(soapModel.getMessageFrom());
		model.setMessageTo(soapModel.getMessageTo());
		model.setIsRead(soapModel.getIsRead());
		model.setIsRemoved(soapModel.getIsRemoved());
		model.setMessageTitle(soapModel.getMessageTitle());
		model.setMessageContent(soapModel.getMessageContent());
		model.setEmailContent(soapModel.getEmailContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<discussionMessageNotification> toModels(
		discussionMessageNotificationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<discussionMessageNotification> models = new ArrayList<discussionMessageNotification>(soapModels.length);

		for (discussionMessageNotificationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.discussionMessageNotification"));

	public discussionMessageNotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_discussionNotificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_discussionNotificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_discussionNotificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return discussionMessageNotification.class;
	}

	@Override
	public String getModelClassName() {
		return discussionMessageNotification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_discussionNotificationId",
			getPK_discussionNotificationId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("PK_projectDiscussionId", getPK_projectDiscussionId());
		attributes.put("messageFrom", getMessageFrom());
		attributes.put("messageTo", getMessageTo());
		attributes.put("isRead", getIsRead());
		attributes.put("isRemoved", getIsRemoved());
		attributes.put("messageTitle", getMessageTitle());
		attributes.put("messageContent", getMessageContent());
		attributes.put("emailContent", getEmailContent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_discussionNotificationId = (Long)attributes.get(
				"PK_discussionNotificationId");

		if (PK_discussionNotificationId != null) {
			setPK_discussionNotificationId(PK_discussionNotificationId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long PK_projectDiscussionId = (Long)attributes.get(
				"PK_projectDiscussionId");

		if (PK_projectDiscussionId != null) {
			setPK_projectDiscussionId(PK_projectDiscussionId);
		}

		Long messageFrom = (Long)attributes.get("messageFrom");

		if (messageFrom != null) {
			setMessageFrom(messageFrom);
		}

		Long messageTo = (Long)attributes.get("messageTo");

		if (messageTo != null) {
			setMessageTo(messageTo);
		}

		Long isRead = (Long)attributes.get("isRead");

		if (isRead != null) {
			setIsRead(isRead);
		}

		Long isRemoved = (Long)attributes.get("isRemoved");

		if (isRemoved != null) {
			setIsRemoved(isRemoved);
		}

		String messageTitle = (String)attributes.get("messageTitle");

		if (messageTitle != null) {
			setMessageTitle(messageTitle);
		}

		String messageContent = (String)attributes.get("messageContent");

		if (messageContent != null) {
			setMessageContent(messageContent);
		}

		String emailContent = (String)attributes.get("emailContent");

		if (emailContent != null) {
			setEmailContent(emailContent);
		}
	}

	@JSON
	@Override
	public long getPK_discussionNotificationId() {
		return _PK_discussionNotificationId;
	}

	@Override
	public void setPK_discussionNotificationId(long PK_discussionNotificationId) {
		_PK_discussionNotificationId = PK_discussionNotificationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getPK_projectDiscussionId() {
		return _PK_projectDiscussionId;
	}

	@Override
	public void setPK_projectDiscussionId(long PK_projectDiscussionId) {
		_PK_projectDiscussionId = PK_projectDiscussionId;
	}

	@JSON
	@Override
	public long getMessageFrom() {
		return _messageFrom;
	}

	@Override
	public void setMessageFrom(long messageFrom) {
		_messageFrom = messageFrom;
	}

	@JSON
	@Override
	public long getMessageTo() {
		return _messageTo;
	}

	@Override
	public void setMessageTo(long messageTo) {
		_messageTo = messageTo;
	}

	@JSON
	@Override
	public long getIsRead() {
		return _isRead;
	}

	@Override
	public void setIsRead(long isRead) {
		_isRead = isRead;
	}

	@JSON
	@Override
	public long getIsRemoved() {
		return _isRemoved;
	}

	@Override
	public void setIsRemoved(long isRemoved) {
		_isRemoved = isRemoved;
	}

	@JSON
	@Override
	public String getMessageTitle() {
		if (_messageTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageTitle;
		}
	}

	@Override
	public void setMessageTitle(String messageTitle) {
		_messageTitle = messageTitle;
	}

	@JSON
	@Override
	public String getMessageContent() {
		if (_messageContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageContent;
		}
	}

	@Override
	public void setMessageContent(String messageContent) {
		_messageContent = messageContent;
	}

	@JSON
	@Override
	public String getEmailContent() {
		if (_emailContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailContent;
		}
	}

	@Override
	public void setEmailContent(String emailContent) {
		_emailContent = emailContent;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			discussionMessageNotification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public discussionMessageNotification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (discussionMessageNotification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		discussionMessageNotificationImpl discussionMessageNotificationImpl = new discussionMessageNotificationImpl();

		discussionMessageNotificationImpl.setPK_discussionNotificationId(getPK_discussionNotificationId());
		discussionMessageNotificationImpl.setGroupId(getGroupId());
		discussionMessageNotificationImpl.setCreateDate(getCreateDate());
		discussionMessageNotificationImpl.setModifiedDate(getModifiedDate());
		discussionMessageNotificationImpl.setPK_projectDiscussionId(getPK_projectDiscussionId());
		discussionMessageNotificationImpl.setMessageFrom(getMessageFrom());
		discussionMessageNotificationImpl.setMessageTo(getMessageTo());
		discussionMessageNotificationImpl.setIsRead(getIsRead());
		discussionMessageNotificationImpl.setIsRemoved(getIsRemoved());
		discussionMessageNotificationImpl.setMessageTitle(getMessageTitle());
		discussionMessageNotificationImpl.setMessageContent(getMessageContent());
		discussionMessageNotificationImpl.setEmailContent(getEmailContent());

		discussionMessageNotificationImpl.resetOriginalValues();

		return discussionMessageNotificationImpl;
	}

	@Override
	public int compareTo(
		discussionMessageNotification discussionMessageNotification) {
		long primaryKey = discussionMessageNotification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof discussionMessageNotification)) {
			return false;
		}

		discussionMessageNotification discussionMessageNotification = (discussionMessageNotification)obj;

		long primaryKey = discussionMessageNotification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		discussionMessageNotificationModelImpl discussionMessageNotificationModelImpl =
			this;

		discussionMessageNotificationModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<discussionMessageNotification> toCacheModel() {
		discussionMessageNotificationCacheModel discussionMessageNotificationCacheModel =
			new discussionMessageNotificationCacheModel();

		discussionMessageNotificationCacheModel.PK_discussionNotificationId = getPK_discussionNotificationId();

		discussionMessageNotificationCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			discussionMessageNotificationCacheModel.createDate = createDate.getTime();
		}
		else {
			discussionMessageNotificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			discussionMessageNotificationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			discussionMessageNotificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		discussionMessageNotificationCacheModel.PK_projectDiscussionId = getPK_projectDiscussionId();

		discussionMessageNotificationCacheModel.messageFrom = getMessageFrom();

		discussionMessageNotificationCacheModel.messageTo = getMessageTo();

		discussionMessageNotificationCacheModel.isRead = getIsRead();

		discussionMessageNotificationCacheModel.isRemoved = getIsRemoved();

		discussionMessageNotificationCacheModel.messageTitle = getMessageTitle();

		String messageTitle = discussionMessageNotificationCacheModel.messageTitle;

		if ((messageTitle != null) && (messageTitle.length() == 0)) {
			discussionMessageNotificationCacheModel.messageTitle = null;
		}

		discussionMessageNotificationCacheModel.messageContent = getMessageContent();

		String messageContent = discussionMessageNotificationCacheModel.messageContent;

		if ((messageContent != null) && (messageContent.length() == 0)) {
			discussionMessageNotificationCacheModel.messageContent = null;
		}

		discussionMessageNotificationCacheModel.emailContent = getEmailContent();

		String emailContent = discussionMessageNotificationCacheModel.emailContent;

		if ((emailContent != null) && (emailContent.length() == 0)) {
			discussionMessageNotificationCacheModel.emailContent = null;
		}

		return discussionMessageNotificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{PK_discussionNotificationId=");
		sb.append(getPK_discussionNotificationId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", PK_projectDiscussionId=");
		sb.append(getPK_projectDiscussionId());
		sb.append(", messageFrom=");
		sb.append(getMessageFrom());
		sb.append(", messageTo=");
		sb.append(getMessageTo());
		sb.append(", isRead=");
		sb.append(getIsRead());
		sb.append(", isRemoved=");
		sb.append(getIsRemoved());
		sb.append(", messageTitle=");
		sb.append(getMessageTitle());
		sb.append(", messageContent=");
		sb.append(getMessageContent());
		sb.append(", emailContent=");
		sb.append(getEmailContent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.discussionMessageNotification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_discussionNotificationId</column-name><column-value><![CDATA[");
		sb.append(getPK_discussionNotificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PK_projectDiscussionId</column-name><column-value><![CDATA[");
		sb.append(getPK_projectDiscussionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageFrom</column-name><column-value><![CDATA[");
		sb.append(getMessageFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageTo</column-name><column-value><![CDATA[");
		sb.append(getMessageTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isRead</column-name><column-value><![CDATA[");
		sb.append(getIsRead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isRemoved</column-name><column-value><![CDATA[");
		sb.append(getIsRemoved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageTitle</column-name><column-value><![CDATA[");
		sb.append(getMessageTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageContent</column-name><column-value><![CDATA[");
		sb.append(getMessageContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailContent</column-name><column-value><![CDATA[");
		sb.append(getEmailContent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = discussionMessageNotification.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			discussionMessageNotification.class
		};
	private long _PK_discussionNotificationId;
	private long _groupId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _PK_projectDiscussionId;
	private long _messageFrom;
	private long _messageTo;
	private long _isRead;
	private long _isRemoved;
	private String _messageTitle;
	private String _messageContent;
	private String _emailContent;
	private discussionMessageNotification _escapedModel;
}