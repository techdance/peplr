/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.Custom_Workflow_Completed;
import com.collaborated.entity.model.Custom_Workflow_CompletedModel;
import com.collaborated.entity.model.Custom_Workflow_CompletedSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Custom_Workflow_Completed service. Represents a row in the &quot;collaborated_Custom_Workflow_Completed&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Custom_Workflow_CompletedModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Custom_Workflow_CompletedImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Custom_Workflow_CompletedImpl
 * @see Custom_Workflow_Completed
 * @see Custom_Workflow_CompletedModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class Custom_Workflow_CompletedModelImpl extends BaseModelImpl<Custom_Workflow_Completed>
	implements Custom_Workflow_CompletedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom_ workflow_ completed model instance should use the {@link Custom_Workflow_Completed} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_Custom_Workflow_Completed";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cId", Types.BIGINT },
			{ "trackingId", Types.BIGINT },
			{ "workflowId", Types.BIGINT },
			{ "workflowTaskId", Types.VARCHAR },
			{ "trasitionId", Types.BIGINT },
			{ "logDescription", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "completedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trackingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workflowId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workflowTaskId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trasitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("logDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("completedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_Custom_Workflow_Completed (cId LONG not null primary key,trackingId LONG,workflowId LONG,workflowTaskId VARCHAR(75) null,trasitionId LONG,logDescription VARCHAR(75) null,comments VARCHAR(75) null,completedDate DATE null,userId LONG,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_Custom_Workflow_Completed";
	public static final String ORDER_BY_JPQL = " ORDER BY custom_Workflow_Completed.cId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_Custom_Workflow_Completed.cId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.Custom_Workflow_Completed"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.Custom_Workflow_Completed"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Custom_Workflow_Completed toModel(
		Custom_Workflow_CompletedSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Custom_Workflow_Completed model = new Custom_Workflow_CompletedImpl();

		model.setCId(soapModel.getCId());
		model.setTrackingId(soapModel.getTrackingId());
		model.setWorkflowId(soapModel.getWorkflowId());
		model.setWorkflowTaskId(soapModel.getWorkflowTaskId());
		model.setTrasitionId(soapModel.getTrasitionId());
		model.setLogDescription(soapModel.getLogDescription());
		model.setComments(soapModel.getComments());
		model.setCompletedDate(soapModel.getCompletedDate());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Custom_Workflow_Completed> toModels(
		Custom_Workflow_CompletedSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Custom_Workflow_Completed> models = new ArrayList<Custom_Workflow_Completed>(soapModels.length);

		for (Custom_Workflow_CompletedSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.Custom_Workflow_Completed"));

	public Custom_Workflow_CompletedModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Custom_Workflow_Completed.class;
	}

	@Override
	public String getModelClassName() {
		return Custom_Workflow_Completed.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cId", getCId());
		attributes.put("trackingId", getTrackingId());
		attributes.put("workflowId", getWorkflowId());
		attributes.put("workflowTaskId", getWorkflowTaskId());
		attributes.put("trasitionId", getTrasitionId());
		attributes.put("logDescription", getLogDescription());
		attributes.put("comments", getComments());
		attributes.put("completedDate", getCompletedDate());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cId = (Long)attributes.get("cId");

		if (cId != null) {
			setCId(cId);
		}

		Long trackingId = (Long)attributes.get("trackingId");

		if (trackingId != null) {
			setTrackingId(trackingId);
		}

		Long workflowId = (Long)attributes.get("workflowId");

		if (workflowId != null) {
			setWorkflowId(workflowId);
		}

		String workflowTaskId = (String)attributes.get("workflowTaskId");

		if (workflowTaskId != null) {
			setWorkflowTaskId(workflowTaskId);
		}

		Long trasitionId = (Long)attributes.get("trasitionId");

		if (trasitionId != null) {
			setTrasitionId(trasitionId);
		}

		String logDescription = (String)attributes.get("logDescription");

		if (logDescription != null) {
			setLogDescription(logDescription);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Date completedDate = (Date)attributes.get("completedDate");

		if (completedDate != null) {
			setCompletedDate(completedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@JSON
	@Override
	public long getCId() {
		return _cId;
	}

	@Override
	public void setCId(long cId) {
		_cId = cId;
	}

	@JSON
	@Override
	public long getTrackingId() {
		return _trackingId;
	}

	@Override
	public void setTrackingId(long trackingId) {
		_trackingId = trackingId;
	}

	@JSON
	@Override
	public long getWorkflowId() {
		return _workflowId;
	}

	@Override
	public void setWorkflowId(long workflowId) {
		_workflowId = workflowId;
	}

	@JSON
	@Override
	public String getWorkflowTaskId() {
		if (_workflowTaskId == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowTaskId;
		}
	}

	@Override
	public void setWorkflowTaskId(String workflowTaskId) {
		_workflowTaskId = workflowTaskId;
	}

	@JSON
	@Override
	public long getTrasitionId() {
		return _trasitionId;
	}

	@Override
	public void setTrasitionId(long trasitionId) {
		_trasitionId = trasitionId;
	}

	@JSON
	@Override
	public String getLogDescription() {
		if (_logDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _logDescription;
		}
	}

	@Override
	public void setLogDescription(String logDescription) {
		_logDescription = logDescription;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public Date getCompletedDate() {
		return _completedDate;
	}

	@Override
	public void setCompletedDate(Date completedDate) {
		_completedDate = completedDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Custom_Workflow_Completed.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Custom_Workflow_Completed toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Custom_Workflow_Completed)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Custom_Workflow_CompletedImpl custom_Workflow_CompletedImpl = new Custom_Workflow_CompletedImpl();

		custom_Workflow_CompletedImpl.setCId(getCId());
		custom_Workflow_CompletedImpl.setTrackingId(getTrackingId());
		custom_Workflow_CompletedImpl.setWorkflowId(getWorkflowId());
		custom_Workflow_CompletedImpl.setWorkflowTaskId(getWorkflowTaskId());
		custom_Workflow_CompletedImpl.setTrasitionId(getTrasitionId());
		custom_Workflow_CompletedImpl.setLogDescription(getLogDescription());
		custom_Workflow_CompletedImpl.setComments(getComments());
		custom_Workflow_CompletedImpl.setCompletedDate(getCompletedDate());
		custom_Workflow_CompletedImpl.setUserId(getUserId());
		custom_Workflow_CompletedImpl.setCreatedDate(getCreatedDate());

		custom_Workflow_CompletedImpl.resetOriginalValues();

		return custom_Workflow_CompletedImpl;
	}

	@Override
	public int compareTo(Custom_Workflow_Completed custom_Workflow_Completed) {
		long primaryKey = custom_Workflow_Completed.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Custom_Workflow_Completed)) {
			return false;
		}

		Custom_Workflow_Completed custom_Workflow_Completed = (Custom_Workflow_Completed)obj;

		long primaryKey = custom_Workflow_Completed.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Custom_Workflow_Completed> toCacheModel() {
		Custom_Workflow_CompletedCacheModel custom_Workflow_CompletedCacheModel = new Custom_Workflow_CompletedCacheModel();

		custom_Workflow_CompletedCacheModel.cId = getCId();

		custom_Workflow_CompletedCacheModel.trackingId = getTrackingId();

		custom_Workflow_CompletedCacheModel.workflowId = getWorkflowId();

		custom_Workflow_CompletedCacheModel.workflowTaskId = getWorkflowTaskId();

		String workflowTaskId = custom_Workflow_CompletedCacheModel.workflowTaskId;

		if ((workflowTaskId != null) && (workflowTaskId.length() == 0)) {
			custom_Workflow_CompletedCacheModel.workflowTaskId = null;
		}

		custom_Workflow_CompletedCacheModel.trasitionId = getTrasitionId();

		custom_Workflow_CompletedCacheModel.logDescription = getLogDescription();

		String logDescription = custom_Workflow_CompletedCacheModel.logDescription;

		if ((logDescription != null) && (logDescription.length() == 0)) {
			custom_Workflow_CompletedCacheModel.logDescription = null;
		}

		custom_Workflow_CompletedCacheModel.comments = getComments();

		String comments = custom_Workflow_CompletedCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			custom_Workflow_CompletedCacheModel.comments = null;
		}

		Date completedDate = getCompletedDate();

		if (completedDate != null) {
			custom_Workflow_CompletedCacheModel.completedDate = completedDate.getTime();
		}
		else {
			custom_Workflow_CompletedCacheModel.completedDate = Long.MIN_VALUE;
		}

		custom_Workflow_CompletedCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			custom_Workflow_CompletedCacheModel.createdDate = createdDate.getTime();
		}
		else {
			custom_Workflow_CompletedCacheModel.createdDate = Long.MIN_VALUE;
		}

		return custom_Workflow_CompletedCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{cId=");
		sb.append(getCId());
		sb.append(", trackingId=");
		sb.append(getTrackingId());
		sb.append(", workflowId=");
		sb.append(getWorkflowId());
		sb.append(", workflowTaskId=");
		sb.append(getWorkflowTaskId());
		sb.append(", trasitionId=");
		sb.append(getTrasitionId());
		sb.append(", logDescription=");
		sb.append(getLogDescription());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", completedDate=");
		sb.append(getCompletedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.Custom_Workflow_Completed");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cId</column-name><column-value><![CDATA[");
		sb.append(getCId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trackingId</column-name><column-value><![CDATA[");
		sb.append(getTrackingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowTaskId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trasitionId</column-name><column-value><![CDATA[");
		sb.append(getTrasitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logDescription</column-name><column-value><![CDATA[");
		sb.append(getLogDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completedDate</column-name><column-value><![CDATA[");
		sb.append(getCompletedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Custom_Workflow_Completed.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Custom_Workflow_Completed.class
		};
	private long _cId;
	private long _trackingId;
	private long _workflowId;
	private String _workflowTaskId;
	private long _trasitionId;
	private String _logDescription;
	private String _comments;
	private Date _completedDate;
	private long _userId;
	private Date _createdDate;
	private Custom_Workflow_Completed _escapedModel;
}