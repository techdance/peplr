/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.applicationLog;
import com.collaborated.entity.model.applicationLogModel;
import com.collaborated.entity.model.applicationLogSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the applicationLog service. Represents a row in the &quot;collaborated_applicationLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link applicationLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link applicationLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see applicationLogImpl
 * @see applicationLog
 * @see applicationLogModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class applicationLogModelImpl extends BaseModelImpl<applicationLog>
	implements applicationLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application log model instance should use the {@link applicationLog} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_applicationLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_logId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "pageName", Types.VARCHAR },
			{ "moduleName", Types.VARCHAR },
			{ "buttonName", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "interestId", Types.BIGINT },
			{ "comments", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_logId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moduleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buttonName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("interestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_applicationLog (PK_logId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,pageName VARCHAR(75) null,moduleName VARCHAR(75) null,buttonName VARCHAR(75) null,projectId LONG,interestId LONG,comments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_applicationLog";
	public static final String ORDER_BY_JPQL = " ORDER BY applicationLog.PK_logId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_applicationLog.PK_logId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.applicationLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.applicationLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static applicationLog toModel(applicationLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		applicationLog model = new applicationLogImpl();

		model.setPK_logId(soapModel.getPK_logId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setPageName(soapModel.getPageName());
		model.setModuleName(soapModel.getModuleName());
		model.setButtonName(soapModel.getButtonName());
		model.setProjectId(soapModel.getProjectId());
		model.setInterestId(soapModel.getInterestId());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<applicationLog> toModels(applicationLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<applicationLog> models = new ArrayList<applicationLog>(soapModels.length);

		for (applicationLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.applicationLog"));

	public applicationLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_logId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_logId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_logId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return applicationLog.class;
	}

	@Override
	public String getModelClassName() {
		return applicationLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_logId", getPK_logId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("pageName", getPageName());
		attributes.put("moduleName", getModuleName());
		attributes.put("buttonName", getButtonName());
		attributes.put("projectId", getProjectId());
		attributes.put("interestId", getInterestId());
		attributes.put("comments", getComments());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_logId = (Long)attributes.get("PK_logId");

		if (PK_logId != null) {
			setPK_logId(PK_logId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String pageName = (String)attributes.get("pageName");

		if (pageName != null) {
			setPageName(pageName);
		}

		String moduleName = (String)attributes.get("moduleName");

		if (moduleName != null) {
			setModuleName(moduleName);
		}

		String buttonName = (String)attributes.get("buttonName");

		if (buttonName != null) {
			setButtonName(buttonName);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long interestId = (Long)attributes.get("interestId");

		if (interestId != null) {
			setInterestId(interestId);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}
	}

	@JSON
	@Override
	public long getPK_logId() {
		return _PK_logId;
	}

	@Override
	public void setPK_logId(long PK_logId) {
		_PK_logId = PK_logId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getPageName() {
		if (_pageName == null) {
			return StringPool.BLANK;
		}
		else {
			return _pageName;
		}
	}

	@Override
	public void setPageName(String pageName) {
		_pageName = pageName;
	}

	@JSON
	@Override
	public String getModuleName() {
		if (_moduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _moduleName;
		}
	}

	@Override
	public void setModuleName(String moduleName) {
		_moduleName = moduleName;
	}

	@JSON
	@Override
	public String getButtonName() {
		if (_buttonName == null) {
			return StringPool.BLANK;
		}
		else {
			return _buttonName;
		}
	}

	@Override
	public void setButtonName(String buttonName) {
		_buttonName = buttonName;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getInterestId() {
		return _interestId;
	}

	@Override
	public void setInterestId(long interestId) {
		_interestId = interestId;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			applicationLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public applicationLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (applicationLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		applicationLogImpl applicationLogImpl = new applicationLogImpl();

		applicationLogImpl.setPK_logId(getPK_logId());
		applicationLogImpl.setUserId(getUserId());
		applicationLogImpl.setUserName(getUserName());
		applicationLogImpl.setCreateDate(getCreateDate());
		applicationLogImpl.setPageName(getPageName());
		applicationLogImpl.setModuleName(getModuleName());
		applicationLogImpl.setButtonName(getButtonName());
		applicationLogImpl.setProjectId(getProjectId());
		applicationLogImpl.setInterestId(getInterestId());
		applicationLogImpl.setComments(getComments());

		applicationLogImpl.resetOriginalValues();

		return applicationLogImpl;
	}

	@Override
	public int compareTo(applicationLog applicationLog) {
		long primaryKey = applicationLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof applicationLog)) {
			return false;
		}

		applicationLog applicationLog = (applicationLog)obj;

		long primaryKey = applicationLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<applicationLog> toCacheModel() {
		applicationLogCacheModel applicationLogCacheModel = new applicationLogCacheModel();

		applicationLogCacheModel.PK_logId = getPK_logId();

		applicationLogCacheModel.userId = getUserId();

		applicationLogCacheModel.userName = getUserName();

		String userName = applicationLogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			applicationLogCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicationLogCacheModel.createDate = createDate.getTime();
		}
		else {
			applicationLogCacheModel.createDate = Long.MIN_VALUE;
		}

		applicationLogCacheModel.pageName = getPageName();

		String pageName = applicationLogCacheModel.pageName;

		if ((pageName != null) && (pageName.length() == 0)) {
			applicationLogCacheModel.pageName = null;
		}

		applicationLogCacheModel.moduleName = getModuleName();

		String moduleName = applicationLogCacheModel.moduleName;

		if ((moduleName != null) && (moduleName.length() == 0)) {
			applicationLogCacheModel.moduleName = null;
		}

		applicationLogCacheModel.buttonName = getButtonName();

		String buttonName = applicationLogCacheModel.buttonName;

		if ((buttonName != null) && (buttonName.length() == 0)) {
			applicationLogCacheModel.buttonName = null;
		}

		applicationLogCacheModel.projectId = getProjectId();

		applicationLogCacheModel.interestId = getInterestId();

		applicationLogCacheModel.comments = getComments();

		String comments = applicationLogCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			applicationLogCacheModel.comments = null;
		}

		return applicationLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{PK_logId=");
		sb.append(getPK_logId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", pageName=");
		sb.append(getPageName());
		sb.append(", moduleName=");
		sb.append(getModuleName());
		sb.append(", buttonName=");
		sb.append(getButtonName());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", interestId=");
		sb.append(getInterestId());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.applicationLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_logId</column-name><column-value><![CDATA[");
		sb.append(getPK_logId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageName</column-name><column-value><![CDATA[");
		sb.append(getPageName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleName</column-name><column-value><![CDATA[");
		sb.append(getModuleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buttonName</column-name><column-value><![CDATA[");
		sb.append(getButtonName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interestId</column-name><column-value><![CDATA[");
		sb.append(getInterestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = applicationLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			applicationLog.class
		};
	private long _PK_logId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private String _pageName;
	private String _moduleName;
	private String _buttonName;
	private long _projectId;
	private long _interestId;
	private String _comments;
	private applicationLog _escapedModel;
}