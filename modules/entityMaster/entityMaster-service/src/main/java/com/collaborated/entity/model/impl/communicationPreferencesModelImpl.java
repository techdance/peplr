/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.communicationPreferences;
import com.collaborated.entity.model.communicationPreferencesModel;
import com.collaborated.entity.model.communicationPreferencesSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the communicationPreferences service. Represents a row in the &quot;collaborated_communicationPreferences&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link communicationPreferencesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link communicationPreferencesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see communicationPreferencesImpl
 * @see communicationPreferences
 * @see communicationPreferencesModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class communicationPreferencesModelImpl extends BaseModelImpl<communicationPreferences>
	implements communicationPreferencesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a communication preferences model instance should use the {@link communicationPreferences} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_communicationPreferences";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_communicationPreferences", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "primaryLanguageId", Types.BIGINT },
			{ "primaryLanguageName", Types.VARCHAR },
			{ "secondaryLanguageId", Types.BIGINT },
			{ "secondaryLanguageName", Types.VARCHAR },
			{ "tertiaryLanguageId", Types.BIGINT },
			{ "tertiaryLanguageName", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "phoneNumber", Types.VARCHAR },
			{ "website", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_communicationPreferences", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("primaryLanguageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("primaryLanguageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryLanguageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("secondaryLanguageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tertiaryLanguageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tertiaryLanguageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("website", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_communicationPreferences (PK_communicationPreferences LONG not null primary key,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,primaryLanguageId LONG,primaryLanguageName VARCHAR(75) null,secondaryLanguageId LONG,secondaryLanguageName VARCHAR(75) null,tertiaryLanguageId LONG,tertiaryLanguageName VARCHAR(75) null,emailAddress VARCHAR(75) null,phoneNumber VARCHAR(75) null,website VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_communicationPreferences";
	public static final String ORDER_BY_JPQL = " ORDER BY communicationPreferences.PK_communicationPreferences ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_communicationPreferences.PK_communicationPreferences ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.communicationPreferences"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.communicationPreferences"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static communicationPreferences toModel(
		communicationPreferencesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		communicationPreferences model = new communicationPreferencesImpl();

		model.setPK_communicationPreferences(soapModel.getPK_communicationPreferences());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPrimaryLanguageId(soapModel.getPrimaryLanguageId());
		model.setPrimaryLanguageName(soapModel.getPrimaryLanguageName());
		model.setSecondaryLanguageId(soapModel.getSecondaryLanguageId());
		model.setSecondaryLanguageName(soapModel.getSecondaryLanguageName());
		model.setTertiaryLanguageId(soapModel.getTertiaryLanguageId());
		model.setTertiaryLanguageName(soapModel.getTertiaryLanguageName());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setPhoneNumber(soapModel.getPhoneNumber());
		model.setWebsite(soapModel.getWebsite());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<communicationPreferences> toModels(
		communicationPreferencesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<communicationPreferences> models = new ArrayList<communicationPreferences>(soapModels.length);

		for (communicationPreferencesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.communicationPreferences"));

	public communicationPreferencesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_communicationPreferences;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_communicationPreferences(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_communicationPreferences;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return communicationPreferences.class;
	}

	@Override
	public String getModelClassName() {
		return communicationPreferences.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_communicationPreferences",
			getPK_communicationPreferences());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("primaryLanguageId", getPrimaryLanguageId());
		attributes.put("primaryLanguageName", getPrimaryLanguageName());
		attributes.put("secondaryLanguageId", getSecondaryLanguageId());
		attributes.put("secondaryLanguageName", getSecondaryLanguageName());
		attributes.put("tertiaryLanguageId", getTertiaryLanguageId());
		attributes.put("tertiaryLanguageName", getTertiaryLanguageName());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("phoneNumber", getPhoneNumber());
		attributes.put("website", getWebsite());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_communicationPreferences = (Long)attributes.get(
				"PK_communicationPreferences");

		if (PK_communicationPreferences != null) {
			setPK_communicationPreferences(PK_communicationPreferences);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long primaryLanguageId = (Long)attributes.get("primaryLanguageId");

		if (primaryLanguageId != null) {
			setPrimaryLanguageId(primaryLanguageId);
		}

		String primaryLanguageName = (String)attributes.get(
				"primaryLanguageName");

		if (primaryLanguageName != null) {
			setPrimaryLanguageName(primaryLanguageName);
		}

		Long secondaryLanguageId = (Long)attributes.get("secondaryLanguageId");

		if (secondaryLanguageId != null) {
			setSecondaryLanguageId(secondaryLanguageId);
		}

		String secondaryLanguageName = (String)attributes.get(
				"secondaryLanguageName");

		if (secondaryLanguageName != null) {
			setSecondaryLanguageName(secondaryLanguageName);
		}

		Long tertiaryLanguageId = (Long)attributes.get("tertiaryLanguageId");

		if (tertiaryLanguageId != null) {
			setTertiaryLanguageId(tertiaryLanguageId);
		}

		String tertiaryLanguageName = (String)attributes.get(
				"tertiaryLanguageName");

		if (tertiaryLanguageName != null) {
			setTertiaryLanguageName(tertiaryLanguageName);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String phoneNumber = (String)attributes.get("phoneNumber");

		if (phoneNumber != null) {
			setPhoneNumber(phoneNumber);
		}

		String website = (String)attributes.get("website");

		if (website != null) {
			setWebsite(website);
		}
	}

	@JSON
	@Override
	public long getPK_communicationPreferences() {
		return _PK_communicationPreferences;
	}

	@Override
	public void setPK_communicationPreferences(long PK_communicationPreferences) {
		_PK_communicationPreferences = PK_communicationPreferences;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getPrimaryLanguageId() {
		return _primaryLanguageId;
	}

	@Override
	public void setPrimaryLanguageId(long primaryLanguageId) {
		_primaryLanguageId = primaryLanguageId;
	}

	@JSON
	@Override
	public String getPrimaryLanguageName() {
		if (_primaryLanguageName == null) {
			return StringPool.BLANK;
		}
		else {
			return _primaryLanguageName;
		}
	}

	@Override
	public void setPrimaryLanguageName(String primaryLanguageName) {
		_primaryLanguageName = primaryLanguageName;
	}

	@JSON
	@Override
	public long getSecondaryLanguageId() {
		return _secondaryLanguageId;
	}

	@Override
	public void setSecondaryLanguageId(long secondaryLanguageId) {
		_secondaryLanguageId = secondaryLanguageId;
	}

	@JSON
	@Override
	public String getSecondaryLanguageName() {
		if (_secondaryLanguageName == null) {
			return StringPool.BLANK;
		}
		else {
			return _secondaryLanguageName;
		}
	}

	@Override
	public void setSecondaryLanguageName(String secondaryLanguageName) {
		_secondaryLanguageName = secondaryLanguageName;
	}

	@JSON
	@Override
	public long getTertiaryLanguageId() {
		return _tertiaryLanguageId;
	}

	@Override
	public void setTertiaryLanguageId(long tertiaryLanguageId) {
		_tertiaryLanguageId = tertiaryLanguageId;
	}

	@JSON
	@Override
	public String getTertiaryLanguageName() {
		if (_tertiaryLanguageName == null) {
			return StringPool.BLANK;
		}
		else {
			return _tertiaryLanguageName;
		}
	}

	@Override
	public void setTertiaryLanguageName(String tertiaryLanguageName) {
		_tertiaryLanguageName = tertiaryLanguageName;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getWebsite() {
		if (_website == null) {
			return StringPool.BLANK;
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		_website = website;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			communicationPreferences.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public communicationPreferences toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (communicationPreferences)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		communicationPreferencesImpl communicationPreferencesImpl = new communicationPreferencesImpl();

		communicationPreferencesImpl.setPK_communicationPreferences(getPK_communicationPreferences());
		communicationPreferencesImpl.setGroupId(getGroupId());
		communicationPreferencesImpl.setUserId(getUserId());
		communicationPreferencesImpl.setCreateDate(getCreateDate());
		communicationPreferencesImpl.setModifiedDate(getModifiedDate());
		communicationPreferencesImpl.setPrimaryLanguageId(getPrimaryLanguageId());
		communicationPreferencesImpl.setPrimaryLanguageName(getPrimaryLanguageName());
		communicationPreferencesImpl.setSecondaryLanguageId(getSecondaryLanguageId());
		communicationPreferencesImpl.setSecondaryLanguageName(getSecondaryLanguageName());
		communicationPreferencesImpl.setTertiaryLanguageId(getTertiaryLanguageId());
		communicationPreferencesImpl.setTertiaryLanguageName(getTertiaryLanguageName());
		communicationPreferencesImpl.setEmailAddress(getEmailAddress());
		communicationPreferencesImpl.setPhoneNumber(getPhoneNumber());
		communicationPreferencesImpl.setWebsite(getWebsite());

		communicationPreferencesImpl.resetOriginalValues();

		return communicationPreferencesImpl;
	}

	@Override
	public int compareTo(communicationPreferences communicationPreferences) {
		long primaryKey = communicationPreferences.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof communicationPreferences)) {
			return false;
		}

		communicationPreferences communicationPreferences = (communicationPreferences)obj;

		long primaryKey = communicationPreferences.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		communicationPreferencesModelImpl communicationPreferencesModelImpl = this;

		communicationPreferencesModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<communicationPreferences> toCacheModel() {
		communicationPreferencesCacheModel communicationPreferencesCacheModel = new communicationPreferencesCacheModel();

		communicationPreferencesCacheModel.PK_communicationPreferences = getPK_communicationPreferences();

		communicationPreferencesCacheModel.groupId = getGroupId();

		communicationPreferencesCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			communicationPreferencesCacheModel.createDate = createDate.getTime();
		}
		else {
			communicationPreferencesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			communicationPreferencesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			communicationPreferencesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		communicationPreferencesCacheModel.primaryLanguageId = getPrimaryLanguageId();

		communicationPreferencesCacheModel.primaryLanguageName = getPrimaryLanguageName();

		String primaryLanguageName = communicationPreferencesCacheModel.primaryLanguageName;

		if ((primaryLanguageName != null) &&
				(primaryLanguageName.length() == 0)) {
			communicationPreferencesCacheModel.primaryLanguageName = null;
		}

		communicationPreferencesCacheModel.secondaryLanguageId = getSecondaryLanguageId();

		communicationPreferencesCacheModel.secondaryLanguageName = getSecondaryLanguageName();

		String secondaryLanguageName = communicationPreferencesCacheModel.secondaryLanguageName;

		if ((secondaryLanguageName != null) &&
				(secondaryLanguageName.length() == 0)) {
			communicationPreferencesCacheModel.secondaryLanguageName = null;
		}

		communicationPreferencesCacheModel.tertiaryLanguageId = getTertiaryLanguageId();

		communicationPreferencesCacheModel.tertiaryLanguageName = getTertiaryLanguageName();

		String tertiaryLanguageName = communicationPreferencesCacheModel.tertiaryLanguageName;

		if ((tertiaryLanguageName != null) &&
				(tertiaryLanguageName.length() == 0)) {
			communicationPreferencesCacheModel.tertiaryLanguageName = null;
		}

		communicationPreferencesCacheModel.emailAddress = getEmailAddress();

		String emailAddress = communicationPreferencesCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			communicationPreferencesCacheModel.emailAddress = null;
		}

		communicationPreferencesCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = communicationPreferencesCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			communicationPreferencesCacheModel.phoneNumber = null;
		}

		communicationPreferencesCacheModel.website = getWebsite();

		String website = communicationPreferencesCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			communicationPreferencesCacheModel.website = null;
		}

		return communicationPreferencesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{PK_communicationPreferences=");
		sb.append(getPK_communicationPreferences());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", primaryLanguageId=");
		sb.append(getPrimaryLanguageId());
		sb.append(", primaryLanguageName=");
		sb.append(getPrimaryLanguageName());
		sb.append(", secondaryLanguageId=");
		sb.append(getSecondaryLanguageId());
		sb.append(", secondaryLanguageName=");
		sb.append(getSecondaryLanguageName());
		sb.append(", tertiaryLanguageId=");
		sb.append(getTertiaryLanguageId());
		sb.append(", tertiaryLanguageName=");
		sb.append(getTertiaryLanguageName());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", phoneNumber=");
		sb.append(getPhoneNumber());
		sb.append(", website=");
		sb.append(getWebsite());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.communicationPreferences");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_communicationPreferences</column-name><column-value><![CDATA[");
		sb.append(getPK_communicationPreferences());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primaryLanguageId</column-name><column-value><![CDATA[");
		sb.append(getPrimaryLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primaryLanguageName</column-name><column-value><![CDATA[");
		sb.append(getPrimaryLanguageName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secondaryLanguageId</column-name><column-value><![CDATA[");
		sb.append(getSecondaryLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secondaryLanguageName</column-name><column-value><![CDATA[");
		sb.append(getSecondaryLanguageName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tertiaryLanguageId</column-name><column-value><![CDATA[");
		sb.append(getTertiaryLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tertiaryLanguageName</column-name><column-value><![CDATA[");
		sb.append(getTertiaryLanguageName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>website</column-name><column-value><![CDATA[");
		sb.append(getWebsite());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = communicationPreferences.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			communicationPreferences.class
		};
	private long _PK_communicationPreferences;
	private long _groupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _primaryLanguageId;
	private String _primaryLanguageName;
	private long _secondaryLanguageId;
	private String _secondaryLanguageName;
	private long _tertiaryLanguageId;
	private String _tertiaryLanguageName;
	private String _emailAddress;
	private String _phoneNumber;
	private String _website;
	private communicationPreferences _escapedModel;
}