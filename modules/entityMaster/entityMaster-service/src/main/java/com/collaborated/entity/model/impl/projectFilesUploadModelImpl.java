/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.collaborated.entity.model.projectFilesUpload;
import com.collaborated.entity.model.projectFilesUploadModel;
import com.collaborated.entity.model.projectFilesUploadSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the projectFilesUpload service. Represents a row in the &quot;collaborated_projectFilesUpload&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link projectFilesUploadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link projectFilesUploadImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see projectFilesUploadImpl
 * @see projectFilesUpload
 * @see projectFilesUploadModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class projectFilesUploadModelImpl extends BaseModelImpl<projectFilesUpload>
	implements projectFilesUploadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project files upload model instance should use the {@link projectFilesUpload} interface instead.
	 */
	public static final String TABLE_NAME = "collaborated_projectFilesUpload";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK_projectFileId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createdOn", Types.TIMESTAMP },
			{ "deletedOn", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "deletedBy", Types.BIGINT },
			{ "PK_projectFolderId", Types.BIGINT },
			{ "fileName", Types.VARCHAR },
			{ "fileEntryId", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK_projectFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("deletedOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deletedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PK_projectFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table collaborated_projectFilesUpload (PK_projectFileId LONG not null primary key,groupId LONG,createdOn DATE null,deletedOn DATE null,userId LONG,deletedBy LONG,PK_projectFolderId LONG,fileName VARCHAR(75) null,fileEntryId VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table collaborated_projectFilesUpload";
	public static final String ORDER_BY_JPQL = " ORDER BY projectFilesUpload.PK_projectFileId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY collaborated_projectFilesUpload.PK_projectFileId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.collaborated.entity.model.projectFilesUpload"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.collaborated.entity.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.collaborated.entity.model.projectFilesUpload"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static projectFilesUpload toModel(projectFilesUploadSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		projectFilesUpload model = new projectFilesUploadImpl();

		model.setPK_projectFileId(soapModel.getPK_projectFileId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setDeletedOn(soapModel.getDeletedOn());
		model.setUserId(soapModel.getUserId());
		model.setDeletedBy(soapModel.getDeletedBy());
		model.setPK_projectFolderId(soapModel.getPK_projectFolderId());
		model.setFileName(soapModel.getFileName());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<projectFilesUpload> toModels(
		projectFilesUploadSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<projectFilesUpload> models = new ArrayList<projectFilesUpload>(soapModels.length);

		for (projectFilesUploadSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.collaborated.entity.service.util.ServiceProps.get(
				"lock.expiration.time.com.collaborated.entity.model.projectFilesUpload"));

	public projectFilesUploadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK_projectFileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK_projectFileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK_projectFileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return projectFilesUpload.class;
	}

	@Override
	public String getModelClassName() {
		return projectFilesUpload.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK_projectFileId", getPK_projectFileId());
		attributes.put("groupId", getGroupId());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("deletedOn", getDeletedOn());
		attributes.put("userId", getUserId());
		attributes.put("deletedBy", getDeletedBy());
		attributes.put("PK_projectFolderId", getPK_projectFolderId());
		attributes.put("fileName", getFileName());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("description", getDescription());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK_projectFileId = (Long)attributes.get("PK_projectFileId");

		if (PK_projectFileId != null) {
			setPK_projectFileId(PK_projectFileId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		Date deletedOn = (Date)attributes.get("deletedOn");

		if (deletedOn != null) {
			setDeletedOn(deletedOn);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long deletedBy = (Long)attributes.get("deletedBy");

		if (deletedBy != null) {
			setDeletedBy(deletedBy);
		}

		Long PK_projectFolderId = (Long)attributes.get("PK_projectFolderId");

		if (PK_projectFolderId != null) {
			setPK_projectFolderId(PK_projectFolderId);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		String fileEntryId = (String)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getPK_projectFileId() {
		return _PK_projectFileId;
	}

	@Override
	public void setPK_projectFileId(long PK_projectFileId) {
		_PK_projectFileId = PK_projectFileId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	@Override
	public Date getDeletedOn() {
		return _deletedOn;
	}

	@Override
	public void setDeletedOn(Date deletedOn) {
		_deletedOn = deletedOn;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getDeletedBy() {
		return _deletedBy;
	}

	@Override
	public void setDeletedBy(long deletedBy) {
		_deletedBy = deletedBy;
	}

	@JSON
	@Override
	public long getPK_projectFolderId() {
		return _PK_projectFolderId;
	}

	@Override
	public void setPK_projectFolderId(long PK_projectFolderId) {
		_PK_projectFolderId = PK_projectFolderId;
	}

	@JSON
	@Override
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@JSON
	@Override
	public String getFileEntryId() {
		if (_fileEntryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileEntryId;
		}
	}

	@Override
	public void setFileEntryId(String fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			projectFilesUpload.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public projectFilesUpload toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (projectFilesUpload)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		projectFilesUploadImpl projectFilesUploadImpl = new projectFilesUploadImpl();

		projectFilesUploadImpl.setPK_projectFileId(getPK_projectFileId());
		projectFilesUploadImpl.setGroupId(getGroupId());
		projectFilesUploadImpl.setCreatedOn(getCreatedOn());
		projectFilesUploadImpl.setDeletedOn(getDeletedOn());
		projectFilesUploadImpl.setUserId(getUserId());
		projectFilesUploadImpl.setDeletedBy(getDeletedBy());
		projectFilesUploadImpl.setPK_projectFolderId(getPK_projectFolderId());
		projectFilesUploadImpl.setFileName(getFileName());
		projectFilesUploadImpl.setFileEntryId(getFileEntryId());
		projectFilesUploadImpl.setDescription(getDescription());

		projectFilesUploadImpl.resetOriginalValues();

		return projectFilesUploadImpl;
	}

	@Override
	public int compareTo(projectFilesUpload projectFilesUpload) {
		long primaryKey = projectFilesUpload.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof projectFilesUpload)) {
			return false;
		}

		projectFilesUpload projectFilesUpload = (projectFilesUpload)obj;

		long primaryKey = projectFilesUpload.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<projectFilesUpload> toCacheModel() {
		projectFilesUploadCacheModel projectFilesUploadCacheModel = new projectFilesUploadCacheModel();

		projectFilesUploadCacheModel.PK_projectFileId = getPK_projectFileId();

		projectFilesUploadCacheModel.groupId = getGroupId();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			projectFilesUploadCacheModel.createdOn = createdOn.getTime();
		}
		else {
			projectFilesUploadCacheModel.createdOn = Long.MIN_VALUE;
		}

		Date deletedOn = getDeletedOn();

		if (deletedOn != null) {
			projectFilesUploadCacheModel.deletedOn = deletedOn.getTime();
		}
		else {
			projectFilesUploadCacheModel.deletedOn = Long.MIN_VALUE;
		}

		projectFilesUploadCacheModel.userId = getUserId();

		projectFilesUploadCacheModel.deletedBy = getDeletedBy();

		projectFilesUploadCacheModel.PK_projectFolderId = getPK_projectFolderId();

		projectFilesUploadCacheModel.fileName = getFileName();

		String fileName = projectFilesUploadCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			projectFilesUploadCacheModel.fileName = null;
		}

		projectFilesUploadCacheModel.fileEntryId = getFileEntryId();

		String fileEntryId = projectFilesUploadCacheModel.fileEntryId;

		if ((fileEntryId != null) && (fileEntryId.length() == 0)) {
			projectFilesUploadCacheModel.fileEntryId = null;
		}

		projectFilesUploadCacheModel.description = getDescription();

		String description = projectFilesUploadCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			projectFilesUploadCacheModel.description = null;
		}

		return projectFilesUploadCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{PK_projectFileId=");
		sb.append(getPK_projectFileId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", deletedOn=");
		sb.append(getDeletedOn());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", deletedBy=");
		sb.append(getDeletedBy());
		sb.append(", PK_projectFolderId=");
		sb.append(getPK_projectFolderId());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.collaborated.entity.model.projectFilesUpload");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK_projectFileId</column-name><column-value><![CDATA[");
		sb.append(getPK_projectFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deletedOn</column-name><column-value><![CDATA[");
		sb.append(getDeletedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deletedBy</column-name><column-value><![CDATA[");
		sb.append(getDeletedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PK_projectFolderId</column-name><column-value><![CDATA[");
		sb.append(getPK_projectFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = projectFilesUpload.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			projectFilesUpload.class
		};
	private long _PK_projectFileId;
	private long _groupId;
	private Date _createdOn;
	private Date _deletedOn;
	private long _userId;
	private long _deletedBy;
	private long _PK_projectFolderId;
	private String _fileName;
	private String _fileEntryId;
	private String _description;
	private projectFilesUpload _escapedModel;
}