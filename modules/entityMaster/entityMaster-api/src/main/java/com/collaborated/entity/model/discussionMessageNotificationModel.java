/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.collaborated.entity.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the discussionMessageNotification service. Represents a row in the &quot;collaborated_discussionMessageNotification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.collaborated.entity.model.impl.discussionMessageNotificationModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.collaborated.entity.model.impl.discussionMessageNotificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see discussionMessageNotification
 * @see com.collaborated.entity.model.impl.discussionMessageNotificationImpl
 * @see com.collaborated.entity.model.impl.discussionMessageNotificationModelImpl
 * @generated
 */
@ProviderType
public interface discussionMessageNotificationModel extends BaseModel<discussionMessageNotification> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a discussion message notification model instance should use the {@link discussionMessageNotification} interface instead.
	 */

	/**
	 * Returns the primary key of this discussion message notification.
	 *
	 * @return the primary key of this discussion message notification
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this discussion message notification.
	 *
	 * @param primaryKey the primary key of this discussion message notification
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the p k_discussion notification ID of this discussion message notification.
	 *
	 * @return the p k_discussion notification ID of this discussion message notification
	 */
	public long getPK_discussionNotificationId();

	/**
	 * Sets the p k_discussion notification ID of this discussion message notification.
	 *
	 * @param PK_discussionNotificationId the p k_discussion notification ID of this discussion message notification
	 */
	public void setPK_discussionNotificationId(long PK_discussionNotificationId);

	/**
	 * Returns the group ID of this discussion message notification.
	 *
	 * @return the group ID of this discussion message notification
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this discussion message notification.
	 *
	 * @param groupId the group ID of this discussion message notification
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the create date of this discussion message notification.
	 *
	 * @return the create date of this discussion message notification
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this discussion message notification.
	 *
	 * @param createDate the create date of this discussion message notification
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this discussion message notification.
	 *
	 * @return the modified date of this discussion message notification
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this discussion message notification.
	 *
	 * @param modifiedDate the modified date of this discussion message notification
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the p k_project discussion ID of this discussion message notification.
	 *
	 * @return the p k_project discussion ID of this discussion message notification
	 */
	public long getPK_projectDiscussionId();

	/**
	 * Sets the p k_project discussion ID of this discussion message notification.
	 *
	 * @param PK_projectDiscussionId the p k_project discussion ID of this discussion message notification
	 */
	public void setPK_projectDiscussionId(long PK_projectDiscussionId);

	/**
	 * Returns the message from of this discussion message notification.
	 *
	 * @return the message from of this discussion message notification
	 */
	public long getMessageFrom();

	/**
	 * Sets the message from of this discussion message notification.
	 *
	 * @param messageFrom the message from of this discussion message notification
	 */
	public void setMessageFrom(long messageFrom);

	/**
	 * Returns the message to of this discussion message notification.
	 *
	 * @return the message to of this discussion message notification
	 */
	public long getMessageTo();

	/**
	 * Sets the message to of this discussion message notification.
	 *
	 * @param messageTo the message to of this discussion message notification
	 */
	public void setMessageTo(long messageTo);

	/**
	 * Returns the is read of this discussion message notification.
	 *
	 * @return the is read of this discussion message notification
	 */
	public long getIsRead();

	/**
	 * Sets the is read of this discussion message notification.
	 *
	 * @param isRead the is read of this discussion message notification
	 */
	public void setIsRead(long isRead);

	/**
	 * Returns the is removed of this discussion message notification.
	 *
	 * @return the is removed of this discussion message notification
	 */
	public long getIsRemoved();

	/**
	 * Sets the is removed of this discussion message notification.
	 *
	 * @param isRemoved the is removed of this discussion message notification
	 */
	public void setIsRemoved(long isRemoved);

	/**
	 * Returns the message title of this discussion message notification.
	 *
	 * @return the message title of this discussion message notification
	 */
	@AutoEscape
	public String getMessageTitle();

	/**
	 * Sets the message title of this discussion message notification.
	 *
	 * @param messageTitle the message title of this discussion message notification
	 */
	public void setMessageTitle(String messageTitle);

	/**
	 * Returns the message content of this discussion message notification.
	 *
	 * @return the message content of this discussion message notification
	 */
	@AutoEscape
	public String getMessageContent();

	/**
	 * Sets the message content of this discussion message notification.
	 *
	 * @param messageContent the message content of this discussion message notification
	 */
	public void setMessageContent(String messageContent);

	/**
	 * Returns the email content of this discussion message notification.
	 *
	 * @return the email content of this discussion message notification
	 */
	@AutoEscape
	public String getEmailContent();

	/**
	 * Sets the email content of this discussion message notification.
	 *
	 * @param emailContent the email content of this discussion message notification
	 */
	public void setEmailContent(String emailContent);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		com.collaborated.entity.model.discussionMessageNotification discussionMessageNotification);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.collaborated.entity.model.discussionMessageNotification> toCacheModel();

	@Override
	public com.collaborated.entity.model.discussionMessageNotification toEscapedModel();

	@Override
	public com.collaborated.entity.model.discussionMessageNotification toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}