/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.6
 * Generated at: 2018-09-02 03:32:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.common.themes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.liferay.exportimport.kernel.staging.LayoutStagingUtil;
import com.liferay.exportimport.kernel.staging.StagingUtil;
import com.liferay.petra.string.CharPool;
import com.liferay.petra.string.StringPool;
import com.liferay.portal.kernel.bean.BeanParamUtil;
import com.liferay.portal.kernel.bean.BeanPropertiesUtil;
import com.liferay.portal.kernel.cal.Recurrence;
import com.liferay.portal.kernel.configuration.Filter;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.search.DisplayTerms;
import com.liferay.portal.kernel.dao.search.ResultRowSplitter;
import com.liferay.portal.kernel.dao.search.RowChecker;
import com.liferay.portal.kernel.dao.search.RowMover;
import com.liferay.portal.kernel.dao.search.SearchContainer;
import com.liferay.portal.kernel.exception.LocalizedException;
import com.liferay.portal.kernel.exception.NoSuchOrganizationException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.language.LanguageUtil;
import com.liferay.portal.kernel.language.LanguageWrapper;
import com.liferay.portal.kernel.language.UnicodeLanguageUtil;
import com.liferay.portal.kernel.layoutconfiguration.util.RuntimePageUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.log.LogUtil;
import com.liferay.portal.kernel.model.*;
import com.liferay.portal.kernel.model.impl.*;
import com.liferay.portal.kernel.model.impl.VirtualLayout;
import com.liferay.portal.kernel.portlet.InvokerPortlet;
import com.liferay.portal.kernel.portlet.LiferayHeaderRequest;
import com.liferay.portal.kernel.portlet.LiferayHeaderResponse;
import com.liferay.portal.kernel.portlet.LiferayPortletMode;
import com.liferay.portal.kernel.portlet.LiferayPortletURL;
import com.liferay.portal.kernel.portlet.LiferayRenderRequest;
import com.liferay.portal.kernel.portlet.LiferayRenderResponse;
import com.liferay.portal.kernel.portlet.LiferayWindowState;
import com.liferay.portal.kernel.portlet.PortletConfigFactoryUtil;
import com.liferay.portal.kernel.portlet.PortletInstanceFactoryUtil;
import com.liferay.portal.kernel.portlet.PortletPreferencesFactoryUtil;
import com.liferay.portal.kernel.portlet.PortletProvider;
import com.liferay.portal.kernel.portlet.PortletProviderUtil;
import com.liferay.portal.kernel.portlet.PortletSetupUtil;
import com.liferay.portal.kernel.portlet.PortletURLFactoryUtil;
import com.liferay.portal.kernel.portlet.PortletURLUtil;
import com.liferay.portal.kernel.portletdisplaytemplate.PortletDisplayTemplateManagerUtil;
import com.liferay.portal.kernel.search.BaseModelSearchResult;
import com.liferay.portal.kernel.search.Hits;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.Sort;
import com.liferay.portal.kernel.search.SortFactoryUtil;
import com.liferay.portal.kernel.security.auth.AuthTokenUtil;
import com.liferay.portal.kernel.security.auth.PrincipalException;
import com.liferay.portal.kernel.security.permission.ActionKeys;
import com.liferay.portal.kernel.security.permission.ResourceActionsUtil;
import com.liferay.portal.kernel.service.*;
import com.liferay.portal.kernel.service.permission.GroupPermissionUtil;
import com.liferay.portal.kernel.service.permission.LayoutPermissionUtil;
import com.liferay.portal.kernel.service.permission.PortletPermissionUtil;
import com.liferay.portal.kernel.service.permission.RolePermissionUtil;
import com.liferay.portal.kernel.servlet.BrowserSnifferUtil;
import com.liferay.portal.kernel.servlet.BufferCacheServletResponse;
import com.liferay.portal.kernel.servlet.MultiSessionMessages;
import com.liferay.portal.kernel.servlet.PortalMessages;
import com.liferay.portal.kernel.servlet.PortalWebResourceConstants;
import com.liferay.portal.kernel.servlet.PortalWebResourcesUtil;
import com.liferay.portal.kernel.servlet.ServletContextPool;
import com.liferay.portal.kernel.servlet.SessionErrors;
import com.liferay.portal.kernel.servlet.SessionMessages;
import com.liferay.portal.kernel.servlet.taglib.ui.FormNavigatorEntry;
import com.liferay.portal.kernel.servlet.taglib.ui.FormNavigatorEntryUtil;
import com.liferay.portal.kernel.servlet.taglib.ui.MenuItem;
import com.liferay.portal.kernel.template.StringTemplateResource;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ArrayUtil;
import com.liferay.portal.kernel.util.CalendarFactoryUtil;
import com.liferay.portal.kernel.util.CalendarUtil;
import com.liferay.portal.kernel.util.Constants;
import com.liferay.portal.kernel.util.ContentTypes;
import com.liferay.portal.kernel.util.CookieKeys;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.FastDateFormatFactoryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.Http;
import com.liferay.portal.kernel.util.HttpUtil;
import com.liferay.portal.kernel.util.IntegerWrapper;
import com.liferay.portal.kernel.util.JavaConstants;
import com.liferay.portal.kernel.util.KeyValuePair;
import com.liferay.portal.kernel.util.ListUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.MathUtil;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.Portal;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.PortletKeys;
import com.liferay.portal.kernel.util.PropertiesUtil;
import com.liferay.portal.kernel.util.PropsKeys;
import com.liferay.portal.kernel.util.ReleaseInfo;
import com.liferay.portal.kernel.util.ResourceBundleUtil;
import com.liferay.portal.kernel.util.ServerDetector;
import com.liferay.portal.kernel.util.SessionClicks;
import com.liferay.portal.kernel.util.SetUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.TextFormatter;
import com.liferay.portal.kernel.util.Time;
import com.liferay.portal.kernel.util.TimeZoneUtil;
import com.liferay.portal.kernel.util.URLCodec;
import com.liferay.portal.kernel.util.UnicodeFormatter;
import com.liferay.portal.kernel.util.UnicodeProperties;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.util.WebKeys;
import com.liferay.portal.kernel.util.comparator.PortletCategoryComparator;
import com.liferay.portal.kernel.util.comparator.PortletTitleComparator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.impl.*;
import com.liferay.portal.plugin.PluginUtil;
import com.liferay.portal.security.sso.SSOUtil;
import com.liferay.portal.service.*;
import com.liferay.portal.struts.StrutsUtil;
import com.liferay.portal.struts.TilesAttributeUtil;
import com.liferay.portal.util.LayoutDescription;
import com.liferay.portal.util.PrefsPropsUtil;
import com.liferay.portal.util.PropsUtil;
import com.liferay.portal.util.PropsValues;
import com.liferay.portal.util.ShutdownUtil;
import com.liferay.portal.util.WebAppPool;
import com.liferay.portlet.HeaderRequestFactory;
import com.liferay.portlet.HeaderResponseFactory;
import com.liferay.portlet.LiferayPortletUtil;
import com.liferay.portlet.RenderParametersPool;
import com.liferay.portlet.RenderRequestFactory;
import com.liferay.portlet.RenderResponseFactory;
import com.liferay.portlet.configuration.kernel.util.PortletConfigurationUtil;
import com.liferay.portlet.usergroupsadmin.search.UserGroupDisplayTerms;
import com.liferay.portlet.usersadmin.search.OrganizationDisplayTerms;
import com.liferay.portlet.usersadmin.search.OrganizationSearch;
import com.liferay.portlet.usersadmin.search.OrganizationSearchTerms;
import com.liferay.portlet.usersadmin.search.UserDisplayTerms;
import com.liferay.portlet.usersadmin.search.UserSearch;
import com.liferay.portlet.usersadmin.search.UserSearchTerms;
import com.liferay.ratings.kernel.RatingsType;
import com.liferay.sites.kernel.util.Sites;
import com.liferay.taglib.search.ResultRow;
import com.liferay.taglib.search.SearchEntry;
import com.liferay.taglib.search.TextSearchEntry;
import com.liferay.taglib.util.OutputTag;
import com.liferay.users.admin.kernel.util.UsersAdmin;
import com.liferay.users.admin.kernel.util.UsersAdminUtil;
import com.liferay.util.Encryptor;
import java.io.Serializable;
import java.text.DateFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeSet;
import javax.portlet.MimeResponse;
import javax.portlet.PortletConfig;
import javax.portlet.PortletContext;
import javax.portlet.PortletException;
import javax.portlet.PortletMode;
import javax.portlet.PortletPreferences;
import javax.portlet.PortletRequest;
import javax.portlet.PortletResponse;
import javax.portlet.PortletURL;
import javax.portlet.ResourceURL;
import javax.portlet.UnavailableException;
import javax.portlet.WindowState;
import com.liferay.asset.kernel.AssetRendererFactoryRegistryUtil;
import com.liferay.asset.kernel.model.AssetCategory;
import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.asset.kernel.model.AssetRenderer;
import com.liferay.asset.kernel.model.AssetRendererFactory;
import com.liferay.asset.kernel.model.AssetTag;
import com.liferay.asset.kernel.model.AssetVocabulary;
import com.liferay.asset.kernel.service.AssetCategoryLocalServiceUtil;
import com.liferay.asset.kernel.service.AssetCategoryServiceUtil;
import com.liferay.asset.kernel.service.AssetEntryLocalServiceUtil;
import com.liferay.asset.kernel.service.AssetTagServiceUtil;
import com.liferay.asset.kernel.service.AssetVocabularyLocalServiceUtil;
import com.liferay.asset.kernel.service.AssetVocabularyServiceUtil;
import com.liferay.document.library.kernel.model.DLFileEntry;
import com.liferay.document.library.kernel.util.DLUtil;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.comment.Comment;
import com.liferay.portal.kernel.portlet.LiferayPortletRequest;
import com.liferay.portal.kernel.portlet.LiferayPortletResponse;
import com.liferay.portal.kernel.repository.model.FileEntry;
import com.liferay.portal.kernel.search.RelatedSearchResult;
import com.liferay.portal.kernel.search.Summary;
import com.liferay.portal.kernel.webserver.WebServerServletTokenUtil;
import com.liferay.portlet.asset.util.AssetUtil;
import com.liferay.portlet.usersadmin.search.GroupSearch;
import com.liferay.portlet.usersadmin.search.GroupSearchTerms;
import com.liferay.trash.kernel.model.TrashEntry;
import com.liferay.trash.kernel.util.TrashUtil;
import java.util.Iterator;
import com.liferay.portal.kernel.model.Portlet;
import com.liferay.portal.kernel.portlet.JavaScriptPortletResourcePredicateFilter;
import com.liferay.portal.kernel.servlet.BrowserMetadata;
import com.liferay.portal.kernel.upload.UploadServletRequestConfigurationHelperUtil;
import com.liferay.portal.kernel.util.PredicateFilter;
import com.liferay.portal.servlet.ComboServletStaticURLGenerator;
import com.liferay.portal.util.LayoutTypeAccessPolicyTracker;
import com.liferay.portlet.PortletResourceAccessor;
import com.liferay.portlet.PortletResourceStaticURLGenerator;
import com.liferay.portlet.internal.RenderStateUtil;
import com.liferay.taglib.aui.ScriptTag;
import java.util.Iterator;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.struts.tiles.ComponentContext;
import org.apache.struts.tiles.taglib.ComponentConstants;

public final class top_005fhead_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


private static String _getDateFormatPattern(Locale locale) {
	String languageId = LocaleUtil.toLanguageId(locale);

	String dateFormatPattern = _dateFormatPatterns.get(languageId);

	if (dateFormatPattern == null) {
		SimpleDateFormat simpleDateFormat = (SimpleDateFormat)DateFormat.getDateInstance(DateFormat.SHORT, locale);

		dateFormatPattern = simpleDateFormat.toPattern();

		if (dateFormatPattern.indexOf("y") == 0) {
			dateFormatPattern = "%Y/%m/%d";
		}
		else if (dateFormatPattern.indexOf("d") == 0) {
			dateFormatPattern = "%d/%m/%Y";
		}
		else {
			dateFormatPattern = "%m/%d/%Y";
		}

		_dateFormatPatterns.put(languageId, dateFormatPattern);
	}

	return dateFormatPattern;
}

private static final Map<String, String> _dateFormatPatterns = new ConcurrentHashMap<>();


private static final String _BOTTOM_KEY = "bottom";

private static final String _LEFT_KEY = "left";

private static final String _RIGHT_KEY = "right";

private static final String _SAME_FOR_ALL_KEY = "sameForAll";

private static final String _TOP_KEY = "top";

private static final String _UNIT_KEY = "unit";

private static final String _VALUE_KEY = "value";

private static final Set _unitSet = new HashSet();

static {
	_unitSet.add("%");
	_unitSet.add("em");
	_unitSet.add("px");
}


private String _escapeCssBlock(String css) {
	return StringUtil.replace(css, new String[] {"<", "expression("}, new String[] {"\\3c", ""});
}

private static Log _log = LogFactoryUtil.getLog("portal_web.docroot.html.common.themes.top_head_jsp");

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(20);
    _jspx_dependants.put("/html/common/init-compat.jsp", Long.valueOf(1530607444000L));
    _jspx_dependants.put("/html/common/themes/top_meta-ext.jsp", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/top_portlet_resources_js.jspf", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/top_meta.jspf", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/top_js-ext.jspf", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/portlet_resources.jspf", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-ui.tld", Long.valueOf(1530607414000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-portlet-ext.tld", Long.valueOf(1530607414000L));
    _jspx_dependants.put("/html/common/init-ext.jsp", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/init.jsp", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-aui.tld", Long.valueOf(1530607414000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-util.tld", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-theme.tld", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/WEB-INF/tld/displaytag.tld", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/top_js.jspf", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-portlet_2_0.tld", Long.valueOf(1530607414000L));
    _jspx_dependants.put("/html/common/init.jsp", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/portlet_css.jspf", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/WEB-INF/tld/c.tld", Long.valueOf(1530606212000L));
    _jspx_dependants.put("/html/common/themes/top_portlet_resources_css.jspf", Long.valueOf(1530606212000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.liferay.portal.kernel.model.impl");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.liferay.portal.kernel.model");
    _jspx_imports_packages.add("com.liferay.portal.model.impl");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.liferay.portal.kernel.service");
    _jspx_imports_packages.add("com.liferay.portal.service");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.liferay.portlet.RenderRequestFactory");
    _jspx_imports_classes.add("java.text.Format");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.PredicateFilter");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.PortalMessages");
    _jspx_imports_classes.add("com.liferay.portal.servlet.ComboServletStaticURLGenerator");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.StringBundler");
    _jspx_imports_classes.add("com.liferay.portal.kernel.workflow.WorkflowConstants");
    _jspx_imports_classes.add("com.liferay.portal.kernel.security.auth.PrincipalException");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.liferay.taglib.util.OutputTag");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.taglib.ui.FormNavigatorEntryUtil");
    _jspx_imports_classes.add("com.liferay.asset.kernel.model.AssetEntry");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayWindowState");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.OrderByComparator");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.CalendarUtil");
    _jspx_imports_classes.add("javax.portlet.PortletContext");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.ServletContextPool");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.BaseModelSearchResult");
    _jspx_imports_classes.add("com.liferay.asset.kernel.model.AssetRendererFactory");
    _jspx_imports_classes.add("com.liferay.portal.util.PropsValues");
    _jspx_imports_classes.add("java.io.Serializable");
    _jspx_imports_classes.add("com.liferay.portal.kernel.language.LanguageUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayRenderResponse");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.JavaConstants");
    _jspx_imports_classes.add("com.liferay.portlet.HeaderResponseFactory");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletProviderUtil");
    _jspx_imports_classes.add("com.liferay.petra.string.StringPool");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletURLUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayPortletURL");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.CookieKeys");
    _jspx_imports_classes.add("com.liferay.portal.plugin.PluginUtil");
    _jspx_imports_classes.add("javax.portlet.MimeResponse");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletPreferencesFactoryUtil");
    _jspx_imports_classes.add("com.liferay.util.Encryptor");
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("org.apache.struts.tiles.ComponentContext");
    _jspx_imports_classes.add("com.liferay.portal.kernel.security.permission.ActionKeys");
    _jspx_imports_classes.add("com.liferay.portal.kernel.dao.search.SearchContainer");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.PortalWebResourcesUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.bean.BeanPropertiesUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portletdisplaytemplate.PortletDisplayTemplateManagerUtil");
    _jspx_imports_classes.add("com.liferay.taglib.search.SearchEntry");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.Portal");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.Hits");
    _jspx_imports_classes.add("com.liferay.portal.kernel.dao.search.ResultRowSplitter");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.ArrayUtil");
    _jspx_imports_classes.add("com.liferay.portal.struts.TilesAttributeUtil");
    _jspx_imports_classes.add("com.liferay.portlet.usergroupsadmin.search.UserGroupDisplayTerms");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.OrganizationSearchTerms");
    _jspx_imports_classes.add("com.liferay.exportimport.kernel.staging.StagingUtil");
    _jspx_imports_classes.add("com.liferay.petra.string.CharPool");
    _jspx_imports_classes.add("com.liferay.portal.kernel.security.permission.ResourceActionsUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.json.JSONArray");
    _jspx_imports_classes.add("com.liferay.portal.kernel.webserver.WebServerServletTokenUtil");
    _jspx_imports_classes.add("com.liferay.portal.security.sso.SSOUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.HtmlUtil");
    _jspx_imports_classes.add("com.liferay.asset.kernel.service.AssetTagServiceUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.Summary");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.taglib.ui.MenuItem");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("com.liferay.portal.kernel.exception.LocalizedException");
    _jspx_imports_classes.add("com.liferay.portal.kernel.bean.BeanParamUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.ShutdownUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PrefsPropsUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.comparator.PortletTitleComparator");
    _jspx_imports_classes.add("com.liferay.taglib.aui.ScriptTag");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.MultiSessionMessages");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("com.liferay.portlet.HeaderRequestFactory");
    _jspx_imports_classes.add("com.liferay.trash.kernel.model.TrashEntry");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.BrowserMetadata");
    _jspx_imports_classes.add("javax.portlet.UnavailableException");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.PortalWebResourceConstants");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("com.liferay.asset.kernel.model.AssetCategory");
    _jspx_imports_classes.add("java.util.concurrent.ConcurrentHashMap");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.PortalUtil");
    _jspx_imports_classes.add("javax.portlet.PortletResponse");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.Validator");
    _jspx_imports_classes.add("com.liferay.portal.kernel.model.Portlet");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.GroupSearchTerms");
    _jspx_imports_classes.add("com.liferay.portal.kernel.language.UnicodeLanguageUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.PortletKeys");
    _jspx_imports_classes.add("java.util.Objects");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.ServerDetector");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayPortletResponse");
    _jspx_imports_classes.add("javax.portlet.WindowState");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.UserSearchTerms");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.ListUtil");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.OrganizationSearch");
    _jspx_imports_classes.add("com.liferay.portal.kernel.language.LanguageWrapper");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.comparator.PortletCategoryComparator");
    _jspx_imports_classes.add("com.liferay.portal.kernel.security.auth.AuthTokenUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.UnicodeFormatter");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayRenderRequest");
    _jspx_imports_classes.add("com.liferay.portal.kernel.layoutconfiguration.util.RuntimePageUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.log.Log");
    _jspx_imports_classes.add("com.liferay.asset.kernel.service.AssetEntryLocalServiceUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.KeyValuePair");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("com.liferay.portal.kernel.exception.SystemException");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletProvider");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.FastDateFormatFactoryUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.repository.model.FileEntry");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.JavaScriptPortletResourcePredicateFilter");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletInstanceFactoryUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletSetupUtil");
    _jspx_imports_classes.add("javax.portlet.ResourceURL");
    _jspx_imports_classes.add("com.liferay.portal.kernel.upload.UploadServletRequestConfigurationHelperUtil");
    _jspx_imports_classes.add("com.liferay.sites.kernel.util.Sites");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.Sort");
    _jspx_imports_classes.add("com.liferay.portal.util.WebAppPool");
    _jspx_imports_classes.add("com.liferay.portal.kernel.json.JSONFactoryUtil");
    _jspx_imports_classes.add("com.liferay.asset.kernel.service.AssetCategoryServiceUtil");
    _jspx_imports_classes.add("com.liferay.portlet.configuration.kernel.util.PortletConfigurationUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayPortletMode");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.DateUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.BrowserSnifferUtil");
    _jspx_imports_classes.add("com.liferay.trash.kernel.util.TrashUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.dao.orm.QueryUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletURLFactoryUtil");
    _jspx_imports_classes.add("javax.portlet.PortletException");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.ContentTypes");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("com.liferay.portal.kernel.dao.search.RowMover");
    _jspx_imports_classes.add("com.liferay.portlet.PortletResourceStaticURLGenerator");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.WebKeys");
    _jspx_imports_classes.add("com.liferay.portal.kernel.theme.ThemeDisplay");
    _jspx_imports_classes.add("com.liferay.portal.kernel.service.permission.RolePermissionUtil");
    _jspx_imports_classes.add("com.liferay.expando.kernel.model.ExpandoBridge");
    _jspx_imports_classes.add("com.liferay.portal.util.PropsUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.comment.Comment");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.PropsKeys");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.GetterUtil");
    _jspx_imports_classes.add("com.liferay.users.admin.kernel.util.UsersAdminUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.log.LogFactoryUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.InvokerPortlet");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.SessionClicks");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("javax.portlet.PortletConfig");
    _jspx_imports_classes.add("com.liferay.portlet.asset.util.AssetUtil");
    _jspx_imports_classes.add("com.liferay.asset.kernel.service.AssetVocabularyServiceUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.SortFactoryUtil");
    _jspx_imports_classes.add("com.liferay.taglib.search.TextSearchEntry");
    _jspx_imports_classes.add("com.liferay.portlet.LiferayPortletUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.URLCodec");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.OrganizationDisplayTerms");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.GroupSearch");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.UserSearch");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.text.NumberFormat");
    _jspx_imports_classes.add("java.util.TreeSet");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.liferay.portal.kernel.exception.PortalException");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.Indexer");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.SessionMessages");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("com.liferay.portal.kernel.service.permission.PortletPermissionUtil");
    _jspx_imports_classes.add("com.liferay.portlet.PortletResourceAccessor");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.TimeZoneUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayHeaderRequest");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.MathUtil");
    _jspx_imports_classes.add("com.liferay.portlet.internal.RenderStateUtil");
    _jspx_imports_classes.add("java.util.LinkedHashSet");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.PortletConfigFactoryUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.SessionErrors");
    _jspx_imports_classes.add("com.liferay.asset.kernel.service.AssetVocabularyLocalServiceUtil");
    _jspx_imports_classes.add("com.liferay.portlet.RenderParametersPool");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("com.liferay.document.library.kernel.model.DLFileEntry");
    _jspx_imports_classes.add("javax.portlet.PortletPreferences");
    _jspx_imports_classes.add("org.apache.struts.tiles.taglib.ComponentConstants");
    _jspx_imports_classes.add("com.liferay.portal.kernel.json.JSONObject");
    _jspx_imports_classes.add("com.liferay.users.admin.kernel.util.UsersAdmin");
    _jspx_imports_classes.add("com.liferay.portal.util.LayoutTypeAccessPolicyTracker");
    _jspx_imports_classes.add("com.liferay.portal.kernel.cal.Recurrence");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.PropertiesUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.service.permission.LayoutPermissionUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.configuration.Filter");
    _jspx_imports_classes.add("javax.portlet.PortletURL");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.TextFormatter");
    _jspx_imports_classes.add("com.liferay.portal.util.LayoutDescription");
    _jspx_imports_classes.add("com.liferay.portal.kernel.log.LogUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.IndexerRegistryUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.Constants");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.ReleaseInfo");
    _jspx_imports_classes.add("com.liferay.portal.struts.StrutsUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.dao.search.DisplayTerms");
    _jspx_imports_classes.add("java.text.DateFormat");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.LocaleUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.Time");
    _jspx_imports_classes.add("com.liferay.portal.kernel.template.StringTemplateResource");
    _jspx_imports_classes.add("com.liferay.asset.kernel.model.AssetVocabulary");
    _jspx_imports_classes.add("com.liferay.exportimport.kernel.staging.LayoutStagingUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.StringUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.UnicodeProperties");
    _jspx_imports_classes.add("com.liferay.taglib.search.ResultRow");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.LocalizationUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.search.RelatedSearchResult");
    _jspx_imports_classes.add("com.liferay.portal.kernel.exception.NoSuchOrganizationException");
    _jspx_imports_classes.add("com.liferay.portlet.RenderResponseFactory");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.SetUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.model.impl.VirtualLayout");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("com.liferay.ratings.kernel.RatingsType");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.IntegerWrapper");
    _jspx_imports_classes.add("javax.portlet.PortletMode");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.CalendarFactoryUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.dao.search.RowChecker");
    _jspx_imports_classes.add("com.liferay.asset.kernel.service.AssetCategoryLocalServiceUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.ResourceBundleUtil");
    _jspx_imports_classes.add("com.liferay.asset.kernel.AssetRendererFactoryRegistryUtil");
    _jspx_imports_classes.add("javax.portlet.PortletRequest");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.ParamUtil");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("com.liferay.asset.kernel.model.AssetTag");
    _jspx_imports_classes.add("com.liferay.portal.kernel.service.permission.GroupPermissionUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.Http");
    _jspx_imports_classes.add("com.liferay.asset.kernel.model.AssetRenderer");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.taglib.ui.FormNavigatorEntry");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.BufferCacheServletResponse");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayPortletRequest");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.HttpUtil");
    _jspx_imports_classes.add("com.liferay.portlet.usersadmin.search.UserDisplayTerms");
    _jspx_imports_classes.add("com.liferay.document.library.kernel.util.DLUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.portlet.LiferayHeaderResponse");
    _jspx_imports_classes.add("java.util.Collections");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fliferay_002dtheme_005fdefineObjects_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fliferay_002dtheme_005fmeta_002dtags_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fliferay_002dui_005fmessage_0026_005fkey_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fliferay_002dtheme_005fdefineObjects_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fliferay_002dtheme_005fmeta_002dtags_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fliferay_002dui_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fliferay_002dtheme_005fdefineObjects_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fliferay_002dtheme_005fmeta_002dtags_005fnobody.release();
    _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody.release();
    _005fjspx_005ftagPool_005fliferay_002dui_005fmessage_0026_005fkey_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      //  liferay-theme:defineObjects
      com.liferay.taglib.theme.DefineObjectsTag _jspx_th_liferay_002dtheme_005fdefineObjects_005f0 = (com.liferay.taglib.theme.DefineObjectsTag) _005fjspx_005ftagPool_005fliferay_002dtheme_005fdefineObjects_005fnobody.get(com.liferay.taglib.theme.DefineObjectsTag.class);
      boolean _jspx_th_liferay_002dtheme_005fdefineObjects_005f0_reused = false;
      try {
        _jspx_th_liferay_002dtheme_005fdefineObjects_005f0.setPageContext(_jspx_page_context);
        _jspx_th_liferay_002dtheme_005fdefineObjects_005f0.setParent(null);
        int _jspx_eval_liferay_002dtheme_005fdefineObjects_005f0 = _jspx_th_liferay_002dtheme_005fdefineObjects_005f0.doStartTag();
        if (_jspx_th_liferay_002dtheme_005fdefineObjects_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fliferay_002dtheme_005fdefineObjects_005fnobody.reuse(_jspx_th_liferay_002dtheme_005fdefineObjects_005f0);
        _jspx_th_liferay_002dtheme_005fdefineObjects_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dtheme_005fdefineObjects_005f0, _jsp_getInstanceManager(), _jspx_th_liferay_002dtheme_005fdefineObjects_005f0_reused);
      }
      com.liferay.portal.kernel.theme.ThemeDisplay themeDisplay = null;
      com.liferay.portal.kernel.model.Company company = null;
      com.liferay.portal.kernel.model.Account account = null;
      com.liferay.portal.kernel.model.User user = null;
      com.liferay.portal.kernel.model.User realUser = null;
      com.liferay.portal.kernel.model.Contact contact = null;
      com.liferay.portal.kernel.model.Layout layout = null;
      java.util.List layouts = null;
      java.lang.Long plid = null;
      com.liferay.portal.kernel.model.LayoutTypePortlet layoutTypePortlet = null;
      java.lang.Long scopeGroupId = null;
      com.liferay.portal.kernel.security.permission.PermissionChecker permissionChecker = null;
      java.util.Locale locale = null;
      java.util.TimeZone timeZone = null;
      com.liferay.portal.kernel.model.Theme theme = null;
      com.liferay.portal.kernel.model.ColorScheme colorScheme = null;
      com.liferay.portal.kernel.theme.PortletDisplay portletDisplay = null;
      java.lang.Long portletGroupId = null;
      themeDisplay = (com.liferay.portal.kernel.theme.ThemeDisplay) _jspx_page_context.findAttribute("themeDisplay");
      company = (com.liferay.portal.kernel.model.Company) _jspx_page_context.findAttribute("company");
      account = (com.liferay.portal.kernel.model.Account) _jspx_page_context.findAttribute("account");
      user = (com.liferay.portal.kernel.model.User) _jspx_page_context.findAttribute("user");
      realUser = (com.liferay.portal.kernel.model.User) _jspx_page_context.findAttribute("realUser");
      contact = (com.liferay.portal.kernel.model.Contact) _jspx_page_context.findAttribute("contact");
      layout = (com.liferay.portal.kernel.model.Layout) _jspx_page_context.findAttribute("layout");
      layouts = (java.util.List) _jspx_page_context.findAttribute("layouts");
      plid = (java.lang.Long) _jspx_page_context.findAttribute("plid");
      layoutTypePortlet = (com.liferay.portal.kernel.model.LayoutTypePortlet) _jspx_page_context.findAttribute("layoutTypePortlet");
      scopeGroupId = (java.lang.Long) _jspx_page_context.findAttribute("scopeGroupId");
      permissionChecker = (com.liferay.portal.kernel.security.permission.PermissionChecker) _jspx_page_context.findAttribute("permissionChecker");
      locale = (java.util.Locale) _jspx_page_context.findAttribute("locale");
      timeZone = (java.util.TimeZone) _jspx_page_context.findAttribute("timeZone");
      theme = (com.liferay.portal.kernel.model.Theme) _jspx_page_context.findAttribute("theme");
      colorScheme = (com.liferay.portal.kernel.model.ColorScheme) _jspx_page_context.findAttribute("colorScheme");
      portletDisplay = (com.liferay.portal.kernel.theme.PortletDisplay) _jspx_page_context.findAttribute("portletDisplay");
      portletGroupId = (java.lang.Long) _jspx_page_context.findAttribute("portletGroupId");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
if (
 BrowserSnifferUtil.isIe(request) ) {
      out.write("\n");
      out.write("\t<meta content=\"");
      out.print( PropsValues.BROWSER_COMPATIBILITY_IE_VERSIONS );
      out.write("\" http-equiv=\"x-ua-compatible\" />\n");
}
      out.write("\n");
      out.write("\n");
      out.write("<meta content=\"");
      out.print( ContentTypes.TEXT_HTML_UTF8 );
      out.write("\" http-equiv=\"content-type\" />\n");
      out.write("\n");

int refreshRate = ParamUtil.getInteger(request, "refresh_rate");

      out.write('\n');
      out.write('\n');
if (
 refreshRate > 0 ) {
      out.write("\n");
      out.write("\t<meta content=\"");
      out.print( refreshRate );
      out.write(";\" http-equiv=\"refresh\" />\n");
}
      out.write('\n');
      out.write('\n');

String cacheControl = request.getParameter("cache_control");

      out.write('\n');
      out.write('\n');
if (
 (cacheControl != null) && cacheControl.equals("0") ) {
      out.write("\n");
      out.write("\t<meta content=\"no-cache\" http-equiv=\"cache-control\" />\n");
      out.write("\t<meta content=\"no-cache\" http-equiv=\"pragma\" />\n");
      out.write("\t<meta content=\"0\" http-equiv=\"expires\" />\n");
}
      out.write('\n');
      out.write('\n');
      if (_jspx_meth_liferay_002dtheme_005fmeta_002dtags_005f0(_jspx_page_context))
        return;
      out.write('\n');
      out.write('\n');
      out.write('\n');
      if (_jspx_meth_liferay_002dutil_005fdynamic_002dinclude_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("<link data-senna-track=\"temporary\" href=\"");
      out.print( themeDisplay.getPathThemeImages() );
      out.write('/');
      out.print( PropsValues.THEME_SHORTCUT_ICON );
      out.write("\" rel=\"Shortcut Icon\" />\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

if (!themeDisplay.isSignedIn() && layout.isPublicLayout()) {
	String completeURL = PortalUtil.getCurrentCompleteURL(request);

	String canonicalURL = PortalUtil.getCanonicalURL(completeURL, themeDisplay, layout);

      out.write("\n");
      out.write("\n");
      out.write("\t<link data-senna-track=\"temporary\" href=\"");
      out.print( HtmlUtil.escapeAttribute(canonicalURL) );
      out.write("\" rel=\"canonical\" />\n");
      out.write("\n");
      out.write("\t");

	Set<Locale> availableLocales = LanguageUtil.getAvailableLocales(themeDisplay.getSiteGroupId());

	if (availableLocales.size() > 1) {
		Map<Locale, String> alternateURLs = PortalUtil.getAlternateURLs(canonicalURL, themeDisplay, layout);

		Locale defaultLocale = LocaleUtil.getDefault();

		for (Map.Entry<Locale, String> entry : alternateURLs.entrySet()) {
			Locale availableLocale = entry.getKey();
			String alternateURL = entry.getValue();
	
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 availableLocale.equals(defaultLocale) ) {
      out.write("\n");
      out.write("\t\t\t\t<link data-senna-track=\"temporary\" href=\"");
      out.print( HtmlUtil.escapeAttribute(canonicalURL) );
      out.write("\" hreflang=\"x-default\" rel=\"alternate\" />\n");
      out.write("\t\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t<link data-senna-track=\"temporary\" href=\"");
      out.print( HtmlUtil.escapeAttribute(alternateURL) );
      out.write("\" hreflang=\"");
      out.print( LocaleUtil.toW3cLanguageId(availableLocale) );
      out.write("\" rel=\"alternate\" />\n");
      out.write("\n");
      out.write("\t");

		}
	}
	
      out.write('\n');
      out.write('\n');

}

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<link class=\"lfr-css-file\" data-senna-track=\"temporary\" href=\"");
      out.print( HtmlUtil.escapeAttribute(PortalUtil.getStaticResourceURL(request, themeDisplay.getPathThemeCss() + "/clay.css")) );
      out.write("\" id=\"liferayAUICSS\" rel=\"stylesheet\" type=\"text/css\" />\n");
      out.write("\n");

long cssLastModifiedTime = PortalWebResourcesUtil.getLastModified(PortalWebResourceConstants.RESOURCE_TYPE_CSS);

      out.write("\n");
      out.write("\n");
      out.write("<link data-senna-track=\"temporary\" href=\"");
      out.print( HtmlUtil.escapeAttribute(PortalUtil.getStaticResourceURL(request, themeDisplay.getCDNDynamicResourcesHost() + PortalWebResourcesUtil.getContextPath(PortalWebResourceConstants.RESOURCE_TYPE_CSS) + "/main.css", cssLastModifiedTime)) );
      out.write("\" id=\"liferayPortalCSS\" rel=\"stylesheet\" type=\"text/css\" />\n");
      out.write("\n");

List<Portlet> portlets = null;

if (layoutTypePortlet != null) {
	portlets = layoutTypePortlet.getAllPortlets();
}

if (layout != null) {
	String ppid = ParamUtil.getString(request, "p_p_id");

	if (layout.isTypeEmbedded() || layout.isTypePortlet()) {
		if (themeDisplay.isStateMaximized() || themeDisplay.isStatePopUp()) {
			if (Validator.isNotNull(ppid)) {
				Portlet portlet = PortletLocalServiceUtil.getPortletById(company.getCompanyId(), ppid);

				if ((portlet != null) && !portlets.contains(portlet)) {
					portlets.add(portlet);
				}
			}
		}
	}
	else if (layout.isTypeControlPanel() || layout.isTypePanel()) {
		portlets = new ArrayList<Portlet>();

		portlets.addAll(layout.getEmbeddedPortlets());

		if (Validator.isNotNull(ppid)) {
			Portlet portlet = PortletLocalServiceUtil.getPortletById(company.getCompanyId(), ppid);

			if ((portlet != null) && !portlets.contains(portlet)) {
				portlets.add(portlet);
			}
		}
	}

	String portletResource = ParamUtil.getString(request, PortalUtil.getPortletNamespace(ppid) + "portletResource");

	if (Validator.isNotNull(portletResource)) {
		Portlet portlet = PortletLocalServiceUtil.getPortletById(company.getCompanyId(), portletResource);

		if ((portlet != null) && !portlets.contains(portlet)) {
			portlets.add(portlet);
		}
	}

	Iterator<Portlet> portletsIterator = portlets.iterator();

	LayoutTypeAccessPolicy layoutTypeAccessPolicy = LayoutTypeAccessPolicyTracker.getLayoutTypeAccessPolicy(layout);

	while (portletsIterator.hasNext()) {
		Portlet portlet = portletsIterator.next();

		try {
			layoutTypeAccessPolicy.checkAccessAllowedToPortlet(request, layout, portlet);
		}
		catch (PrincipalException pe) {
			portletsIterator.remove();
		}
	}

	request.setAttribute(WebKeys.LAYOUT_PORTLETS, portlets);
}

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
if (
 (portlets != null) && !portlets.isEmpty() ) {
      out.write('\n');
      out.write('\n');
      out.write('	');

	PortletResourceAccessor[] portletResourceAccessors = {PortletResourceAccessor.HEADER_PORTAL_CSS, PortletResourceAccessor.HEADER_PORTLET_CSS};
	PredicateFilter<String> predicateFilter = PredicateFilter.ALL;
	boolean useComboServletStaticURLGenerator = themeDisplay.isThemeCssFastLoad();
	
      out.write('\n');
      out.write('\n');
      out.write('	');
      out.write('\n');
      out.write('\n');

List<String> urls = new ArrayList<String>();

      out.write('\n');
      out.write('\n');
if (
 (portlets != null) && !portlets.isEmpty() ) {
      out.write('\n');
      out.write('\n');
      out.write('	');

	Set<String> portletResourceStaticURLs = (Set<String>)request.getAttribute(WebKeys.PORTLET_RESOURCE_STATIC_URLS);

	if (portletResourceStaticURLs == null) {
		portletResourceStaticURLs = new LinkedHashSet<String>();

		request.setAttribute(WebKeys.PORTLET_RESOURCE_STATIC_URLS, portletResourceStaticURLs);
	}

	if (useComboServletStaticURLGenerator) {
		ComboServletStaticURLGenerator comboServletStaticURLGenerator = new ComboServletStaticURLGenerator();

		comboServletStaticURLGenerator.setPortletResourceAccessors(portletResourceAccessors);
		comboServletStaticURLGenerator.setPredicateFilter(predicateFilter);
		comboServletStaticURLGenerator.setTimestamp(theme.getTimestamp());
		comboServletStaticURLGenerator.setURLPrefix(PortalUtil.getStaticResourceURL(request, themeDisplay.getCDNDynamicResourcesHost() + themeDisplay.getPathContext() + "/combo", "minifierType=&themeId=" + themeDisplay.getThemeId(), -1));
		comboServletStaticURLGenerator.setVisitedURLs(portletResourceStaticURLs);

		urls.addAll(comboServletStaticURLGenerator.generate(portlets));
	}
	else {
		PortletResourceStaticURLGenerator portletResourceStaticURLGenerator = new PortletResourceStaticURLGenerator();

		portletResourceStaticURLGenerator.setRequest(request);
		portletResourceStaticURLGenerator.setVisitedURLs(portletResourceStaticURLs);

		for (Portlet curPortlet : portlets) {
			urls.addAll(portletResourceStaticURLGenerator.generate(curPortlet, portletResourceAccessors));
		}
	}
	
      out.write('\n');
      out.write('\n');
}
      out.write('\n');
      out.write('\n');
      out.write('	');

	for (String url : urls) {
	
      out.write("\n");
      out.write("\n");
      out.write("\t\t<link data-senna-track=\"temporary\" href=\"");
      out.print( HtmlUtil.escapeAttribute(url) );
      out.write("\" id=\"");
      out.print( HtmlUtil.escapeAttribute(StringUtil.toHexString(url.hashCode())) );
      out.write("\" rel=\"stylesheet\" type=\"text/css\" />\n");
      out.write("\n");
      out.write("\t");

	}
	
      out.write('\n');
      out.write('\n');
}
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<script data-senna-track=\"temporary\" type=\"text/javascript\">\n");
      out.write("\t// <![CDATA[\n");
      out.write("\t\tvar Liferay = Liferay || {};\n");
      out.write("\n");
      out.write("\t\tLiferay.Browser = {\n");
      out.write("\t\t\tacceptsGzip: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( BrowserSnifferUtil.acceptsGzip(request) );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t");

			String version = BrowserSnifferUtil.getVersion(request);

			String majorVersion = version;

			if (version.isEmpty()) {
				majorVersion = "0";
			}
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t\tgetMajorVersion: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( majorVersion );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\tgetRevision: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( BrowserSnifferUtil.getRevision(request) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetVersion: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( version );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t");

			BrowserMetadata browserMetadata = BrowserSnifferUtil.getBrowserMetadata(request);
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t\tisAir: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isAir() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisChrome: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isChrome() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisEdge: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( BrowserSnifferUtil.isEdge(request) );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisFirefox: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isFirefox() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisGecko: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isGecko() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisIe: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isIe() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisIphone: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isIphone() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisLinux: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isLinux() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisMac: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isMac() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisMobile: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isMobile() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisMozilla: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isMozilla() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisOpera: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isOpera() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisRtf: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isRtf(version) );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisSafari: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isSafari() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisSun: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isSun() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisWebKit: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isWebKit() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisWindows: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( browserMetadata.isWindows() );
      out.write(";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tLiferay.Data = Liferay.Data || {};\n");
      out.write("\n");
      out.write("\t\tLiferay.Data.ICONS_INLINE_SVG = true;\n");
      out.write("\n");
      out.write("\t\tLiferay.Data.NAV_SELECTOR = '#navigation';\n");
      out.write("\n");
      out.write("\t\tLiferay.Data.NAV_SELECTOR_MOBILE = '#navigationCollapse';\n");
      out.write("\n");
      out.write("\t\tLiferay.Data.isCustomizationView = function() {\n");
      out.write("\t\t\treturn ");
      out.print( layoutTypePortlet.isCustomizable() && LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.CUSTOMIZE) );
      out.write(";\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tLiferay.Data.notices = [\n");
      out.write("\t\t\tnull\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 permissionChecker.isOmniadmin() && PortalUtil.isUpdateAvailable() ) {
      out.write("\n");
      out.write("\t\t\t\t, {\n");
      out.write("\t\t\t\t\tcontent: '<a class=\"update-available\" href=\"");
      out.print( themeDisplay.getURLUpdateManager() );
      out.write('"');
      out.write('>');
      if (_jspx_meth_liferay_002dui_005fmessage_005f0(_jspx_page_context))
        return;
      out.write("</a>',\n");
      out.write("\t\t\t\t\ttoggleText: false\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 ShutdownUtil.isInProcess() ) {
      out.write("\n");
      out.write("\t\t\t\t, {\n");
      out.write("\t\t\t\t\tnode: '#lfrShutdownMessage',\n");
      out.write("\t\t\t\t\ttoggleText: false,\n");
      out.write("\t\t\t\t\ttype: 'warning'\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t");
}
      out.write("\n");
      out.write("\t\t];\n");
      out.write("\n");
      out.write("\t\tLiferay.PortletKeys = {\n");
      out.write("\t\t\tDOCUMENT_LIBRARY: '");
      out.print( PortletKeys.DOCUMENT_LIBRARY );
      out.write("',\n");
      out.write("\t\t\tDYNAMIC_DATA_MAPPING: 'com_liferay_dynamic_data_mapping_web_portlet_DDMPortlet',\n");
      out.write("\t\t\tITEM_SELECTOR: '");
      out.print( PortletKeys.ITEM_SELECTOR );
      out.write("'\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tLiferay.PropsValues = {\n");
      out.write("\t\t\tJAVASCRIPT_SINGLE_PAGE_APPLICATION_TIMEOUT: ");
      out.print( PrefsPropsUtil.getInteger(themeDisplay.getCompanyId(), PropsKeys.JAVASCRIPT_SINGLE_PAGE_APPLICATION_TIMEOUT, PropsValues.JAVASCRIPT_SINGLE_PAGE_APPLICATION_TIMEOUT) );
      out.write(",\n");
      out.write("\t\t\tNTLM_AUTH_ENABLED: ");
      out.print( PrefsPropsUtil.getBoolean(themeDisplay.getCompanyId(), PropsKeys.NTLM_AUTH_ENABLED, PropsValues.NTLM_AUTH_ENABLED) );
      out.write(",\n");
      out.write("\t\t\tUPLOAD_SERVLET_REQUEST_IMPL_MAX_SIZE: ");
      out.print( UploadServletRequestConfigurationHelperUtil.getMaxSize() );
      out.write("\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tLiferay.ThemeDisplay = {\n");
      out.write("\n");
      out.write("\t\t\t");

			Group scopeGroup = themeDisplay.getScopeGroup();

			Group liveGroup = StagingUtil.getLiveGroup(scopeGroup);
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 layout != null ) {
      out.write("\n");
      out.write("\t\t\t\tgetLayoutId: function() {\n");
      out.write("\t\t\t\t\treturn '");
      out.print( layout.getLayoutId() );
      out.write("';\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t");

				Layout controlPanelLayout = themeDisplay.getControlPanelLayout();
				
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\tgetLayoutRelativeControlPanelURL: function() {\n");
      out.write("\t\t\t\t\treturn '");
      out.print( PortalUtil.getLayoutRelativeURL(new VirtualLayout(controlPanelLayout, scopeGroup), themeDisplay) );
      out.write("';\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\tgetLayoutRelativeURL: function() {\n");
      out.write("\t\t\t\t\treturn '");
      out.print( PortalUtil.getLayoutRelativeURL(layout, themeDisplay) );
      out.write("';\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tgetLayoutURL: function() {\n");
      out.write("\t\t\t\t\treturn '");
      out.print( PortalUtil.getLayoutURL(layout, themeDisplay) );
      out.write("';\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tgetParentLayoutId: function() {\n");
      out.write("\t\t\t\t\treturn '");
      out.print( layout.getParentLayoutId() );
      out.write("';\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tisControlPanel: function() {\n");
      out.write("\t\t\t\t\treturn ");
      out.print( layout.isTypeControlPanel() );
      out.write(";\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tisPrivateLayout: function() {\n");
      out.write("\t\t\t\t\treturn '");
      out.print( layout.isPrivateLayout() );
      out.write("';\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tisVirtualLayout: function() {\n");
      out.write("\t\t\t\t\treturn ");
      out.print( layout instanceof VirtualLayout );
      out.write(";\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("\t\t\tgetBCP47LanguageId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( LanguageUtil.getBCP47LanguageId(request) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetCanonicalURL: function() {\n");
      out.write("\n");
      out.write("\t\t\t\t");

				String completeURL = PortalUtil.getCurrentCompleteURL(request);
				
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\treturn '");
      out.print( PortalUtil.getCanonicalURL(completeURL, themeDisplay, layout) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetCDNBaseURL: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getCDNBaseURL() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetCDNDynamicResourcesHost: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getCDNDynamicResourcesHost() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetCDNHost: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getCDNHost() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetCompanyGroupId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getCompanyGroupId() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetCompanyId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getCompanyId() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetDefaultLanguageId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( LocaleUtil.toLanguageId(themeDisplay.getSiteDefaultLocale()) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetDoAsUserIdEncoded: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( UnicodeFormatter.toString(themeDisplay.getDoAsUserId()) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetLanguageId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( LanguageUtil.getLanguageId(request) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetParentGroupId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getSiteGroupId() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPathContext: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathContext() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPathImage: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathImage() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPathJavaScript: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathJavaScript() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPathMain: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathMain() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPathThemeImages: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathThemeImages() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPathThemeRoot: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathThemeRoot() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPlid: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPlid() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPortalURL: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPortalURL() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetScopeGroupId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( scopeGroup.getGroupId() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetScopeGroupIdOrLiveGroupId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( liveGroup.getGroupId() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetSessionId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( PropsValues.SESSION_ENABLE_URL_WITH_SESSION_ID ? session.getId() : StringPool.BLANK );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetSiteAdminURL: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( PortalUtil.getSiteAdminURL(themeDisplay, StringPool.BLANK, null) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetSiteGroupId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getSiteGroupId() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetURLControlPanel: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getURLControlPanel() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetURLHome: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( HtmlUtil.escapeJS(themeDisplay.getURLHome()) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetUserId: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getUserId() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetUserName: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.isSignedIn() ? UnicodeFormatter.toString(user.getFullName()) : StringPool.BLANK );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisAddSessionIdToURL: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isAddSessionIdToURL() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisFreeformLayout: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isFreeformLayout() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisImpersonated: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isImpersonated() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisSignedIn: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isSignedIn() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisStateExclusive: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isStateExclusive() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisStateMaximized: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isStateMaximized() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tisStatePopUp: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isStatePopUp() );
      out.write(";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tvar themeDisplay = Liferay.ThemeDisplay;\n");
      out.write("\n");
      out.write("\t\tLiferay.AUI = {\n");
      out.write("\n");
      out.write("\t\t\t");

			long jsLastModified = PortalWebResourcesUtil.getLastModified(PortalWebResourceConstants.RESOURCE_TYPE_JS);
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t\tgetAvailableLangPath: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( PortalUtil.getStaticResourceURL(request, "available_languages.jsp", jsLastModified) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetCombine: function() {\n");
      out.write("\t\t\t\treturn ");
      out.print( themeDisplay.isThemeJsFastLoad() );
      out.write(";\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetComboPath: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( PortalUtil.getStaticResourceURL(request, themeDisplay.getCDNDynamicResourcesHost() + themeDisplay.getPathContext() + "/combo/", "minifierType=", jsLastModified) );
      out.write("&';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetDateFormat: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( _getDateFormatPattern(locale) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetEditorCKEditorPath: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( PortalWebResourcesUtil.getContextPath(PortalWebResourceConstants.RESOURCE_TYPE_EDITOR_CKEDITOR) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetFilter: function() {\n");
      out.write("\t\t\t\tvar filter = 'raw';\n");
      out.write("\n");
      out.write("\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t\t");
if (
 themeDisplay.isThemeJsFastLoad() ) {
      out.write("\n");
      out.write("\t\t\t\t\t\tfilter = 'min';\n");
      out.write("\t\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t\t");
}
else if (
 PropsValues.JAVASCRIPT_LOG_ENABLED ) {
      out.write("\n");
      out.write("\t\t\t\t\t\tfilter = 'debug';\n");
      out.write("\t\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\treturn filter;\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetFilterConfig: function() {\n");
      out.write("\t\t\t\tvar instance = this;\n");
      out.write("\n");
      out.write("\t\t\t\tvar filterConfig = null;\n");
      out.write("\n");
      out.write("\t\t\t\tif (!instance.getCombine()) {\n");
      out.write("\t\t\t\t\tfilterConfig = {\n");
      out.write("\t\t\t\t\t\treplaceStr: '.js' + instance.getStaticResourceURLParams(),\n");
      out.write("\t\t\t\t\t\tsearchExp: '\\\\.js$'\n");
      out.write("\t\t\t\t\t};\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn filterConfig;\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetJavaScriptRootPath: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathJavaScript() );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetLangPath: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( PortalUtil.getStaticResourceURL(request, "aui_lang.jsp", jsLastModified) );
      out.write("';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetPortletRootPath: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( themeDisplay.getPathContext() );
      out.write("/html/portlet';\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tgetStaticResourceURLParams: function() {\n");
      out.write("\t\t\t\treturn '");
      out.print( PortalUtil.getStaticResourceURL(request, StringPool.BLANK, "minifierType=", jsLastModified) );
      out.write("';\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tLiferay.authToken = '");
      out.print( AuthTokenUtil.getToken(request) );
      out.write("';\n");
      out.write("\n");
      out.write("\t\t");

		String currentURL = PortalUtil.getCurrentURL(request);
		
      out.write("\n");
      out.write("\n");
      out.write("\t\tLiferay.currentURL = '");
      out.print( HtmlUtil.escapeJS(currentURL) );
      out.write("';\n");
      out.write("\t\tLiferay.currentURLEncoded = '");
      out.print( HtmlUtil.escapeJS(URLCodec.encodeURL(currentURL)) );
      out.write("';\n");
      out.write("\t// ]]>\n");
      out.write("</script>\n");
      out.write("\n");
if (
 PortalWebResourcesUtil.getPortalWebResources(PortalWebResourceConstants.RESOURCE_TYPE_JS_LOADER_MODULES) != null ) {
      out.write('\n');
      out.write('\n');
      out.write('	');

	long jsLoaderModulesLastModified = PortalWebResourcesUtil.getLastModified(PortalWebResourceConstants.RESOURCE_TYPE_JS_LOADER_MODULES);
	
      out.write("\n");
      out.write("\n");
      out.write("\t<script src=\"");
      out.print( HtmlUtil.escape(themeDisplay.getCDNDynamicResourcesHost() + PortalWebResourcesUtil.getContextPath(PortalWebResourceConstants.RESOURCE_TYPE_JS_LOADER_MODULES) + "/js_loader_modules?t=" + jsLoaderModulesLastModified) );
      out.write("\" type=\"text/javascript\"></script>\n");
}
      out.write('\n');
      out.write('\n');
      if (_jspx_meth_liferay_002dutil_005fdynamic_002dinclude_005f1(_jspx_page_context))
        return;
      out.write('\n');
      out.write('\n');
if (
 PortalWebResourcesUtil.getPortalWebResources(PortalWebResourceConstants.RESOURCE_TYPE_JS_BUNDLE_CONFIG) != null ) {
      out.write('\n');
      out.write('\n');
      out.write('	');

	long jsBundleConfigLastModified = PortalWebResourcesUtil.getLastModified(PortalWebResourceConstants.RESOURCE_TYPE_JS_BUNDLE_CONFIG);
	
      out.write("\n");
      out.write("\n");
      out.write("\t<script src=\"");
      out.print( HtmlUtil.escape(themeDisplay.getCDNDynamicResourcesHost() + PortalWebResourcesUtil.getContextPath(PortalWebResourceConstants.RESOURCE_TYPE_JS_BUNDLE_CONFIG) + "/js_bundle_config?t=" + jsBundleConfigLastModified) );
      out.write("\" type=\"text/javascript\"></script>\n");
}
      out.write("\n");
      out.write("\n");
      out.write("<script data-senna-track=\"temporary\" type=\"text/javascript\">\n");
      out.write("\t// <![CDATA[\n");
      out.write("\t\t");
if (
 layoutTypePortlet != null ) {
      out.write("\n");
      out.write("\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t");
if (
 layoutTypePortlet.hasStateMax() ) {
      out.write("\n");
      out.write("\t\t\t\t\tLiferay.Portlet.register('");
      out.print( HtmlUtil.escapeJS(layoutTypePortlet.getStateMaxPortletId()) );
      out.write("');\n");
      out.write("\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t");
}
else if (
 themeDisplay.isStatePopUp() ) {
      out.write("\n");
      out.write("\t\t\t\t\tLiferay.Portlet.register('");
      out.print( HtmlUtil.escapeJS(themeDisplay.getPpid()) );
      out.write("');\n");
      out.write("\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t");
}
      out.write('\n');
      out.write('	');
      out.write('	');
}
      out.write("\n");
      out.write("\n");
      out.write("\t\t");

		Group group = null;

		if (layout != null) {
			group = layout.getGroup();
		}
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t");
if (
 themeDisplay.isSignedIn() ) {
      out.write("\n");
      out.write("\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t");
if (
 (group != null) && group.isControlPanel() && !LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.UPDATE) && !(layoutTypePortlet.isCustomizable() && layoutTypePortlet.isCustomizedView() && LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.CUSTOMIZE)) ) {
      out.write("\n");
      out.write("\t\t\t\t\tLiferay._editControlsState = 'visible';\n");
      out.write("\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t");
}
else {
      out.write("\n");
      out.write("\t\t\t\t\tLiferay._editControlsState = '");
      out.print( HtmlUtil.escapeJS(GetterUtil.getString(SessionClicks.get(request, "com.liferay.frontend.js.web_toggleControls", "visible"), "visible")) );
      out.write("';\n");
      out.write("\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t");
}
      out.write('\n');
      out.write('	');
      out.write('	');
}
      out.write("\n");
      out.write("\t// ]]>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

String liferayAnalyticsKey = PrefsPropsUtil.getString(company.getCompanyId(), PropsKeys.ADMIN_LIFERAY_ANALYTICS_KEY);

UnicodeProperties groupTypeSettings = group.getTypeSettingsProperties();

if (Validator.isNull(liferayAnalyticsKey)) {
	liferayAnalyticsKey = groupTypeSettings.getProperty(GroupConstants.TYPE_SETTINGS_KEY_LIFERAY_ANALYTICS_KEY);
}

      out.write('\n');
      out.write('\n');
if (
 Validator.isNotNull(liferayAnalyticsKey) ) {
      out.write("\n");
      out.write("\t<script data-senna-track=\"permanent\" id=\"liferayAnalyticsScript\" type=\"text/javascript\">\n");
      out.write("\t\t(function(u, c, a, m, o, l) {\n");
      out.write("\t\t\to = 'script';\n");
      out.write("\t\t\tl = document;\n");
      out.write("\t\t\ta = l.createElement(o);\n");
      out.write("\t\t\tm = l.getElementsByTagName(o)[0];\n");
      out.write("\t\t\ta.async = 1;\n");
      out.write("\t\t\ta.src = u;\n");
      out.write("\t\t\ta.onload = c;\n");
      out.write("\t\t\tm.parentNode.insertBefore(a, m);\n");
      out.write("\t\t})('https://analytics-js-cdn.liferay.com', function() {\n");
      out.write("\t\t\tvar config = {analyticsKey: '");
      out.print( HtmlUtil.escapeJS(liferayAnalyticsKey) );
      out.write("'};\n");
      out.write("\n");
      out.write("\t\t\tAnalytics.create(config);\n");
      out.write("\n");
      out.write("\t\t\tAnalytics.registerMiddleware(\n");
      out.write("\t\t\t\tfunction(request) {\n");
      out.write("\t\t\t\t\trequest.context.canonicalUrl = themeDisplay.getCanonicalURL();\n");
      out.write("\n");
      out.write("\t\t\t\t\treturn request;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t);\n");
      out.write("\n");
      out.write("\t\t\tif (themeDisplay.isSignedIn()) {\n");
      out.write("\t\t\t\tAnalytics.setIdentity(\n");
      out.write("\t\t\t\t\t{\n");
      out.write("\t\t\t\t\t\temail: '");
      out.print( HtmlUtil.escapeJS(user.getEmailAddress()) );
      out.write("',\n");
      out.write("\t\t\t\t\t\tname: '");
      out.print( HtmlUtil.escapeJS(user.getFullName()) );
      out.write("'\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tAnalytics.send('pageViewed', 'Page');\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 PropsValues.JAVASCRIPT_SINGLE_PAGE_APPLICATION_ENABLED ) {
      out.write("\n");
      out.write("\t\t\t\tLiferay.on(\n");
      out.write("\t\t\t\t\t'endNavigate',\n");
      out.write("\t\t\t\t\tfunction(event) {\n");
      out.write("\t\t\t\t\t\tAnalytics.dispose();\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tAnalytics.create(config);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tif (themeDisplay.isSignedIn()) {\n");
      out.write("\t\t\t\t\t\t\tAnalytics.setIdentity(\n");
      out.write("\t\t\t\t\t\t\t\t{\n");
      out.write("\t\t\t\t\t\t\t\t\temail: '");
      out.print( HtmlUtil.escapeJS(user.getEmailAddress()) );
      out.write("',\n");
      out.write("\t\t\t\t\t\t\t\t\tname: '");
      out.print( HtmlUtil.escapeJS(user.getFullName()) );
      out.write("'\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tAnalytics.send('pageViewed', 'Page', {'page': event.path});\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t");
}
      out.write("\n");
      out.write("\t\t});\n");
      out.write("\t</script>\n");
}
      out.write('\n');
      out.write('\n');

String[] analyticsTypes = PrefsPropsUtil.getStringArray(company.getCompanyId(), PropsKeys.ADMIN_ANALYTICS_TYPES, StringPool.NEW_LINE);

for (String analyticsType : analyticsTypes) {

      out.write('\n');
      out.write('\n');
      out.write('	');
      out.write('\n');
      out.write('	');
      out.write('	');
if (
 StringUtil.equalsIgnoreCase(analyticsType, "google") ) {
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");

			String googleAnalyticsId = groupTypeSettings.getProperty("googleAnalyticsId");
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 Validator.isNotNull(googleAnalyticsId) ) {
      out.write("\n");
      out.write("\t\t\t\t<script data-senna-track=\"permanent\" id=\"googleAnalyticsScript\" type=\"text/javascript\">\n");
      out.write("\t\t\t\t\t(function(i, s, o, g, r, a, m) {\n");
      out.write("\t\t\t\t\t\ti['GoogleAnalyticsObject'] = r;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\ti[r] = i[r] || function() {\n");
      out.write("\t\t\t\t\t\t\tvar arrayValue = i[r].q || [];\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\ti[r].q = arrayValue;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t(i[r].q).push(arguments);\n");
      out.write("\t\t\t\t\t\t};\n");
      out.write("\n");
      out.write("\t\t\t\t\t\ti[r].l = 1 * new Date();\n");
      out.write("\n");
      out.write("\t\t\t\t\t\ta = s.createElement(o);\n");
      out.write("\t\t\t\t\t\tm = s.getElementsByTagName(o)[0];\n");
      out.write("\t\t\t\t\t\ta.async = 1;\n");
      out.write("\t\t\t\t\t\ta.src = g;\n");
      out.write("\t\t\t\t\t\tm.parentNode.insertBefore(a, m);\n");
      out.write("\t\t\t\t\t})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');\n");
      out.write("\n");
      out.write("\t\t\t\t\tga('create', '");
      out.print( HtmlUtil.escapeJS(googleAnalyticsId) );
      out.write("', 'auto');\n");
      out.write("\t\t\t\t\tga('send', 'pageview');\n");
      out.write("\n");
      out.write("\t\t\t\t\t");
if (
 PropsValues.JAVASCRIPT_SINGLE_PAGE_APPLICATION_ENABLED ) {
      out.write("\n");
      out.write("\t\t\t\t\t\tLiferay.on(\n");
      out.write("\t\t\t\t\t\t\t'endNavigate',\n");
      out.write("\t\t\t\t\t\t\tfunction(event) {\n");
      out.write("\t\t\t\t\t\t\t\tga('set', 'page', event.path);\n");
      out.write("\t\t\t\t\t\t\t\tga('send', 'pageview');\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t);\n");
      out.write("\t\t\t\t\t");
}
      out.write("\n");
      out.write("\t\t\t\t</script>\n");
      out.write("\t\t\t");
}
      out.write('\n');
      out.write('	');
      out.write('	');
      out.write('\n');
      out.write('	');
      out.write('	');
}
else {
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");

			String analyticsScript = groupTypeSettings.getProperty(Sites.ANALYTICS_PREFIX + analyticsType);
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 Validator.isNotNull(analyticsScript) ) {
      out.write("\n");
      out.write("\t\t\t\t");
      out.print( analyticsScript );
      out.write("\n");
      out.write("\t\t\t");
}
      out.write('\n');
      out.write('	');
      out.write('	');
      out.write('\n');
      out.write('	');
}
      out.write('\n');
      out.write('\n');

}

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
if (
 (portlets != null) && !portlets.isEmpty() ) {
      out.write('\n');
      out.write('\n');
      out.write('	');

	PortletResourceAccessor[] portletResourceAccessors = {PortletResourceAccessor.HEADER_PORTAL_JAVASCRIPT, PortletResourceAccessor.HEADER_PORTLET_JAVASCRIPT};
	PredicateFilter<String> predicateFilter = new JavaScriptPortletResourcePredicateFilter(themeDisplay);
	boolean useComboServletStaticURLGenerator = themeDisplay.isThemeJsFastLoad();
	
      out.write('\n');
      out.write('\n');
      out.write('	');
      out.write('\n');
      out.write('\n');

List<String> urls = new ArrayList<String>();

      out.write('\n');
      out.write('\n');
if (
 (portlets != null) && !portlets.isEmpty() ) {
      out.write('\n');
      out.write('\n');
      out.write('	');

	Set<String> portletResourceStaticURLs = (Set<String>)request.getAttribute(WebKeys.PORTLET_RESOURCE_STATIC_URLS);

	if (portletResourceStaticURLs == null) {
		portletResourceStaticURLs = new LinkedHashSet<String>();

		request.setAttribute(WebKeys.PORTLET_RESOURCE_STATIC_URLS, portletResourceStaticURLs);
	}

	if (useComboServletStaticURLGenerator) {
		ComboServletStaticURLGenerator comboServletStaticURLGenerator = new ComboServletStaticURLGenerator();

		comboServletStaticURLGenerator.setPortletResourceAccessors(portletResourceAccessors);
		comboServletStaticURLGenerator.setPredicateFilter(predicateFilter);
		comboServletStaticURLGenerator.setTimestamp(theme.getTimestamp());
		comboServletStaticURLGenerator.setURLPrefix(PortalUtil.getStaticResourceURL(request, themeDisplay.getCDNDynamicResourcesHost() + themeDisplay.getPathContext() + "/combo", "minifierType=&themeId=" + themeDisplay.getThemeId(), -1));
		comboServletStaticURLGenerator.setVisitedURLs(portletResourceStaticURLs);

		urls.addAll(comboServletStaticURLGenerator.generate(portlets));
	}
	else {
		PortletResourceStaticURLGenerator portletResourceStaticURLGenerator = new PortletResourceStaticURLGenerator();

		portletResourceStaticURLGenerator.setRequest(request);
		portletResourceStaticURLGenerator.setVisitedURLs(portletResourceStaticURLs);

		for (Portlet curPortlet : portlets) {
			urls.addAll(portletResourceStaticURLGenerator.generate(curPortlet, portletResourceAccessors));
		}
	}
	
      out.write('\n');
      out.write('\n');
}
      out.write('\n');
      out.write('\n');
      out.write('	');

	for (String url : urls) {
	
      out.write("\n");
      out.write("\n");
      out.write("\t\t<script data-senna-track=\"temporary\" src=\"");
      out.print( HtmlUtil.escapeAttribute(url) );
      out.write("\" type=\"text/javascript\"></script>\n");
      out.write("\n");
      out.write("\t");

	}
	
      out.write('\n');
      out.write('\n');
}
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

List<String> markupHeaders = (List<String>)request.getAttribute(MimeResponse.MARKUP_HEAD_ELEMENT);

if (markupHeaders != null) {
	for (String markupHeader : markupHeaders) {

      out.write("\n");
      out.write("\n");
      out.write("\t\t");
      out.print( markupHeader );
      out.write('\n');
      out.write('\n');

	}
}

com.liferay.petra.string.StringBundler pageTopSB = OutputTag.getDataSB(request, WebKeys.PAGE_TOP);

      out.write('\n');
      out.write('\n');
if (
 pageTopSB != null ) {
      out.write('\n');
      out.write('\n');
      out.write('	');

	pageTopSB.writeTo(out);
	
      out.write('\n');
      out.write('\n');
}
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\tvar portlet = portlet || {};\n");
      out.write("\n");
      out.write("\tportlet.impl = portlet.impl || {};\n");
      out.write("\n");
      out.write("\tportlet.impl.getInitData = function() {\n");
      out.write("\t\treturn ");
      out.print( RenderStateUtil.generateJSON(request, themeDisplay) );
      out.write(";\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<link class=\"lfr-css-file\" data-senna-track=\"temporary\" href=\"");
      out.print( HtmlUtil.escapeAttribute(PortalUtil.getStaticResourceURL(request, themeDisplay.getPathThemeCss() + "/main.css")) );
      out.write("\" id=\"liferayThemeCSS\" rel=\"stylesheet\" type=\"text/css\" />\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
if (
 (layout != null) && Validator.isNotNull(layout.getCssText()) ) {
      out.write("\n");
      out.write("\t<style data-senna-track=\"temporary\" type=\"text/css\">\n");
      out.write("\t\t");
      out.print( _escapeCssBlock(layout.getCssText()) );
      out.write("\n");
      out.write("\t</style>\n");
}
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
if (
 portlets != null ) {
      out.write("\n");
      out.write("\t<style data-senna-track=\"temporary\" type=\"text/css\">\n");
      out.write("\n");
      out.write("\t\t");

		for (Portlet portlet : portlets) {
			PortletPreferences portletSetup = themeDisplay.getStrictLayoutPortletSetup(layout, portlet.getPortletId());

			String portletSetupCss = portletSetup.getValue("portletSetupCss", StringPool.BLANK);
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");
if (
 Validator.isNotNull(portletSetupCss) ) {
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t");

				try {
				
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t");
      out.write('\n');
      out.write('\n');

JSONObject jsonObject = PortletSetupUtil.cssToJSONObject(portletSetup, portletSetupCss);

List finalCSS = new ArrayList();

// Background data

JSONObject bgData = jsonObject.getJSONObject("bgData");

String bgColor = bgData.getString("backgroundColor");
String bgImage = bgData.getString("backgroundImage");

JSONObject bgPos = bgData.getJSONObject("backgroundPosition");
JSONObject bgPosLeft = bgPos.getJSONObject(_LEFT_KEY);
JSONObject bgPosTop = bgPos.getJSONObject(_TOP_KEY);

String bgPosLeftValue = bgPosLeft.getString(_VALUE_KEY) + bgPosLeft.getString(_UNIT_KEY);
String bgPosTopValue = bgPosTop.getString(_VALUE_KEY) + bgPosTop.getString(_UNIT_KEY);
String bgPosValue = bgPosLeftValue + " " + bgPosTopValue;

boolean useBgImage = bgData.getBoolean("useBgImage");

if (Validator.isNotNull(bgColor)) {
	finalCSS.add("background-color: " + bgColor);
}

if (Validator.isNotNull(bgImage)) {
	finalCSS.add("background-image: url(" + bgImage + ")");
}

if (useBgImage) {
	finalCSS.add("background-position: " + bgPosValue);
}

// Border data

JSONObject borderData = jsonObject.getJSONObject("borderData");

JSONObject borderWidth = borderData.getJSONObject("borderWidth");
JSONObject borderStyle = borderData.getJSONObject("borderStyle");
JSONObject borderColor = borderData.getJSONObject("borderColor");

boolean ufaBorderWidth = borderWidth.getBoolean(_SAME_FOR_ALL_KEY);
boolean ufaBorderStyle = borderStyle.getBoolean(_SAME_FOR_ALL_KEY);
boolean ufaBorderColor = borderColor.getBoolean(_SAME_FOR_ALL_KEY);

// Width

JSONObject borderWidthTop = borderWidth.getJSONObject(_TOP_KEY);
JSONObject borderWidthRight = borderWidth.getJSONObject(_RIGHT_KEY);
JSONObject borderWidthBottom = borderWidth.getJSONObject(_BOTTOM_KEY);
JSONObject borderWidthLeft = borderWidth.getJSONObject(_LEFT_KEY);

String borderTopWidthValue = borderWidthTop.getString(_VALUE_KEY) + borderWidthTop.getString(_UNIT_KEY);
String borderRightWidthValue = borderWidthRight.getString(_VALUE_KEY) + borderWidthRight.getString(_UNIT_KEY);
String borderBottomWidthValue = borderWidthBottom.getString(_VALUE_KEY) + borderWidthBottom.getString(_UNIT_KEY);
String borderLeftWidthValue = borderWidthLeft.getString(_VALUE_KEY) + borderWidthLeft.getString(_UNIT_KEY);

// Style

String borderTopStyleValue = borderStyle.getString(_TOP_KEY);
String borderRightStyleValue = borderStyle.getString(_RIGHT_KEY);
String borderBottomStyleValue = borderStyle.getString(_BOTTOM_KEY);
String borderLeftStyleValue = borderStyle.getString(_LEFT_KEY);

// Color

String borderTopColorValue = borderColor.getString(_TOP_KEY);
String borderRightColorValue = borderColor.getString(_RIGHT_KEY);
String borderBottomColorValue = borderColor.getString(_BOTTOM_KEY);
String borderLeftColorValue = borderColor.getString(_LEFT_KEY);

if (ufaBorderWidth) {
	if (!_unitSet.contains(borderTopWidthValue)) {
		finalCSS.add("border-width: " + borderTopWidthValue);
	}
}
else {
	if (!_unitSet.contains(borderTopWidthValue)) {
		finalCSS.add("border-top-width: " + borderTopWidthValue);
	}

	if (!_unitSet.contains(borderRightWidthValue)) {
		finalCSS.add("border-right-width: " + borderRightWidthValue);
	}

	if (!_unitSet.contains(borderBottomWidthValue)) {
		finalCSS.add("border-bottom-width: " + borderBottomWidthValue);
	}

	if (!_unitSet.contains(borderLeftWidthValue)) {
		finalCSS.add("border-left-width: " + borderLeftWidthValue);
	}
}

if (ufaBorderStyle) {
	if (Validator.isNotNull(borderTopStyleValue)) {
		finalCSS.add("border-style: " + borderTopStyleValue);
	}
}
else {
	if (Validator.isNotNull(borderTopStyleValue)) {
		finalCSS.add("border-top-style: " + borderTopStyleValue);
	}

	if (Validator.isNotNull(borderRightStyleValue)) {
		finalCSS.add("border-right-style: " + borderRightStyleValue);
	}

	if (Validator.isNotNull(borderBottomStyleValue)) {
		finalCSS.add("border-bottom-style: " + borderBottomStyleValue);
	}

	if (Validator.isNotNull(borderLeftStyleValue)) {
		finalCSS.add("border-left-style: " + borderLeftStyleValue);
	}
}

if (ufaBorderColor) {
	if (Validator.isNotNull(borderTopColorValue)) {
		finalCSS.add("border-color: " + borderTopColorValue);
	}
}
else {
	if (Validator.isNotNull(borderTopColorValue)) {
		finalCSS.add("border-top-color: " + borderTopColorValue);
	}

	if (Validator.isNotNull(borderRightColorValue)) {
		finalCSS.add("border-right-color: " + borderRightColorValue);
	}

	if (Validator.isNotNull(borderBottomColorValue)) {
		finalCSS.add("border-bottom-color: " + borderBottomColorValue);
	}

	if (Validator.isNotNull(borderLeftColorValue)) {
		finalCSS.add("border-left-color: " + borderLeftColorValue);
	}
}

// Spacing data

JSONObject spacingData = jsonObject.getJSONObject("spacingData");

JSONObject margin = spacingData.getJSONObject("margin");
JSONObject padding = spacingData.getJSONObject("padding");

boolean ufaMargin = margin.getBoolean(_SAME_FOR_ALL_KEY);
boolean ufaPadding = padding.getBoolean(_SAME_FOR_ALL_KEY);

// Margin

JSONObject marginTop = margin.getJSONObject(_TOP_KEY);
JSONObject marginRight = margin.getJSONObject(_RIGHT_KEY);
JSONObject marginBottom = margin.getJSONObject(_BOTTOM_KEY);
JSONObject marginLeft = margin.getJSONObject(_LEFT_KEY);

String marginTopValue = marginTop.getString(_VALUE_KEY) + marginTop.getString(_UNIT_KEY);
String marginRightValue = marginRight.getString(_VALUE_KEY) + marginRight.getString(_UNIT_KEY);
String marginBottomValue = marginBottom.getString(_VALUE_KEY) + marginBottom.getString(_UNIT_KEY);
String marginLeftValue = marginLeft.getString(_VALUE_KEY) + marginLeft.getString(_UNIT_KEY);

if (ufaMargin) {
	if (!_unitSet.contains(marginTopValue)) {
		finalCSS.add("margin: " + marginTopValue);
	}
}
else {
	if (!_unitSet.contains(marginTopValue)) {
		finalCSS.add("margin-top: " + marginTopValue);
	}

	if (!_unitSet.contains(marginRightValue)) {
		finalCSS.add("margin-right: " + marginRightValue);
	}

	if (!_unitSet.contains(marginBottomValue)) {
		finalCSS.add("margin-bottom: " + marginBottomValue);
	}

	if (!_unitSet.contains(marginLeftValue)) {
		finalCSS.add("margin-left: " + marginLeftValue);
	}
}

// Padding

JSONObject paddingTop = padding.getJSONObject(_TOP_KEY);
JSONObject paddingRight = padding.getJSONObject(_RIGHT_KEY);
JSONObject paddingBottom = padding.getJSONObject(_BOTTOM_KEY);
JSONObject paddingLeft = padding.getJSONObject(_LEFT_KEY);

String paddingTopValue = paddingTop.getString(_VALUE_KEY) + paddingTop.getString(_UNIT_KEY);
String paddingRightValue = paddingRight.getString(_VALUE_KEY) + paddingRight.getString(_UNIT_KEY);
String paddingBottomValue = paddingBottom.getString(_VALUE_KEY) + paddingBottom.getString(_UNIT_KEY);
String paddingLeftValue = paddingLeft.getString(_VALUE_KEY) + paddingLeft.getString(_UNIT_KEY);

if (ufaPadding) {
	if (!_unitSet.contains(paddingTopValue)) {
		finalCSS.add("padding: " + paddingTopValue);
	}
}
else {
	if (!_unitSet.contains(paddingTopValue)) {
		finalCSS.add("padding-top: " + paddingTopValue);
	}

	if (!_unitSet.contains(paddingRightValue)) {
		finalCSS.add("padding-right: " + paddingRightValue);
	}

	if (!_unitSet.contains(paddingBottomValue)) {
		finalCSS.add("padding-bottom: " + paddingBottomValue);
	}

	if (!_unitSet.contains(paddingLeftValue)) {
		finalCSS.add("padding-left: " + paddingLeftValue);
	}
}

// Text data

JSONObject textData = jsonObject.getJSONObject("textData");

String color = textData.getString("color");
String fontFamily = textData.getString("fontFamily");
String fontSize = textData.getString("fontSize");
String fontStyle = textData.getString("fontStyle");
String fontWeight = textData.getString("fontWeight");
String letterSpacing = textData.getString("letterSpacing");
String lineHeight = textData.getString("lineHeight");
String textAlign = textData.getString("textAlign");
String textDecoration = textData.getString("textDecoration");
String wordSpacing = textData.getString("wordSpacing");

if (Validator.isNotNull(color)) {
	finalCSS.add("color: " + color);
}

if (Validator.isNotNull(fontFamily)) {
	finalCSS.add("font-family: '" + fontFamily + "'");
}

if (Validator.isNotNull(fontSize)) {
	finalCSS.add("font-size: " + fontSize);
}

if (Validator.isNotNull(fontStyle)) {
	finalCSS.add("font-style: " + fontStyle);
}

if (Validator.isNotNull(fontWeight)) {
	finalCSS.add("font-weight: " + fontWeight);
}

if (Validator.isNotNull(letterSpacing)) {
	finalCSS.add("letter-spacing: " + letterSpacing);
}

if (Validator.isNotNull(lineHeight)) {
	finalCSS.add("line-height: " + lineHeight);
}

if (Validator.isNotNull(textAlign)) {
	finalCSS.add("text-align: " + textAlign);
}

if (Validator.isNotNull(textDecoration)) {
	finalCSS.add("text-decoration: " + textDecoration);
}

if (Validator.isNotNull(wordSpacing)) {
	finalCSS.add("word-spacing: " + wordSpacing);
}

// Advanced styling

JSONObject advancedData = jsonObject.getJSONObject("advancedData");

String customCSS = advancedData.getString("customCSS");

// Generated CSS

out.print("#p_p_id_" + portlet.getPortletId() + "_ .portlet-content");

out.print(" {\n");

String[] finalCSSArray = (String[])finalCSS.toArray(new String[0]);

String finalCSSString = StringUtil.merge(finalCSSArray, ";\n");

out.print(_escapeCssBlock(finalCSSString));

out.print("\n}\n");

// Advanced CSS

if (Validator.isNotNull(customCSS)) {
	out.print(_escapeCssBlock(customCSS));
}

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t");

				}
				catch (Exception e) {
					if (_log.isWarnEnabled()) {
						_log.warn(e.getMessage());
					}
				}
				
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("\t\t");

		}
		
      out.write("\n");
      out.write("\n");
      out.write("\t</style>\n");
}
      out.write('\n');
      out.write('\n');
      if (_jspx_meth_liferay_002dutil_005fdynamic_002dinclude_005f2(_jspx_page_context))
        return;
      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_liferay_002dtheme_005fmeta_002dtags_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  liferay-theme:meta-tags
    com.liferay.taglib.theme.MetaTagsTag _jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0 = (com.liferay.taglib.theme.MetaTagsTag) _005fjspx_005ftagPool_005fliferay_002dtheme_005fmeta_002dtags_005fnobody.get(com.liferay.taglib.theme.MetaTagsTag.class);
    boolean _jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0_reused = false;
    try {
      _jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0.setParent(null);
      int _jspx_eval_liferay_002dtheme_005fmeta_002dtags_005f0 = _jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0.doStartTag();
      if (_jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fliferay_002dtheme_005fmeta_002dtags_005fnobody.reuse(_jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0);
      _jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0, _jsp_getInstanceManager(), _jspx_th_liferay_002dtheme_005fmeta_002dtags_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_liferay_002dutil_005fdynamic_002dinclude_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  liferay-util:dynamic-include
    com.liferay.taglib.util.DynamicIncludeTag _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0 = (com.liferay.taglib.util.DynamicIncludeTag) _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody.get(com.liferay.taglib.util.DynamicIncludeTag.class);
    boolean _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0_reused = false;
    try {
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.setParent(null);
      // /html/common/themes/top_head.jsp(21,0) name = key type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.setKey("/html/common/themes/top_head.jsp#pre");
      int _jspx_eval_liferay_002dutil_005fdynamic_002dinclude_005f0 = _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.doStartTag();
      if (_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody.reuse(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0);
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0, _jsp_getInstanceManager(), _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_liferay_002dui_005fmessage_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  liferay-ui:message
    com.liferay.taglib.ui.MessageTag _jspx_th_liferay_002dui_005fmessage_005f0 = (com.liferay.taglib.ui.MessageTag) _005fjspx_005ftagPool_005fliferay_002dui_005fmessage_0026_005fkey_005fnobody.get(com.liferay.taglib.ui.MessageTag.class);
    boolean _jspx_th_liferay_002dui_005fmessage_005f0_reused = false;
    try {
      _jspx_th_liferay_002dui_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dui_005fmessage_005f0.setParent(null);
      // /html/common/themes/top_js.jspf(121,92) name = key type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_liferay_002dui_005fmessage_005f0.setKey("updates-are-available-for-liferay");
      int _jspx_eval_liferay_002dui_005fmessage_005f0 = _jspx_th_liferay_002dui_005fmessage_005f0.doStartTag();
      if (_jspx_th_liferay_002dui_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fliferay_002dui_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_liferay_002dui_005fmessage_005f0);
      _jspx_th_liferay_002dui_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dui_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_liferay_002dui_005fmessage_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_liferay_002dutil_005fdynamic_002dinclude_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  liferay-util:dynamic-include
    com.liferay.taglib.util.DynamicIncludeTag _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1 = (com.liferay.taglib.util.DynamicIncludeTag) _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody.get(com.liferay.taglib.util.DynamicIncludeTag.class);
    boolean _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1_reused = false;
    try {
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1.setParent(null);
      // /html/common/themes/top_js.jspf(385,0) name = key type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1.setKey("/html/common/themes/top_js.jspf#resources");
      int _jspx_eval_liferay_002dutil_005fdynamic_002dinclude_005f1 = _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1.doStartTag();
      if (_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody.reuse(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1);
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1, _jsp_getInstanceManager(), _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_liferay_002dutil_005fdynamic_002dinclude_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  liferay-util:dynamic-include
    com.liferay.taglib.util.DynamicIncludeTag _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2 = (com.liferay.taglib.util.DynamicIncludeTag) _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody.get(com.liferay.taglib.util.DynamicIncludeTag.class);
    boolean _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2_reused = false;
    try {
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2.setParent(null);
      // /html/common/themes/top_head.jsp(237,0) name = key type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2.setKey("/html/common/themes/top_head.jsp#post");
      int _jspx_eval_liferay_002dutil_005fdynamic_002dinclude_005f2 = _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2.doStartTag();
      if (_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fliferay_002dutil_005fdynamic_002dinclude_0026_005fkey_005fnobody.reuse(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2);
      _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2, _jsp_getInstanceManager(), _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f2_reused);
    }
    return false;
  }
}
